/**
 * Generated by orval v6.31.0 🍺
 * Do not edit manually.
 * Nory Inventory API
 * API for managing inventory, staff, locations, recipes, menu items, and related data for Nory.
 * OpenAPI spec version: 1.0.0
 */
import type {
  Ingredient,
  IngredientCreate,
  IngredientUpdate,
  InventoryMovement,
  InventoryMovementCreate,
  InventoryStock,
  InventoryStockCreate,
  InventoryStockUpdate,
  ListInventoryMovementsParams,
  ListInventoryStockParams,
  Location,
  LocationCreate,
  LocationIngredientCost,
  LocationIngredientCostCreate,
  LocationIngredientCostUpdate,
  LocationMenuItem,
  LocationMenuItemCreate,
  LocationMenuItemUpdate,
  LocationUpdate,
  Modifier,
  ModifierCreate,
  ModifierOption,
  ModifierOptionCreate,
  ModifierOptionUpdate,
  ModifierUpdate,
  Recipe,
  RecipeCreate,
  RecipeIngredientLink,
  RecipeIngredientLinkCreate,
  RecipeUpdate,
  Staff,
  StaffCreate,
  StaffUpdate,
} from './model';
import { customInstance } from '../custom-instance';

export const getNoryInventoryAPI = () => {
  /**
   * Retrieve a list of all locations managed in the inventory system.
   * @summary List all locations
   */
  const listLocations = () => {
    return customInstance<Location[]>({ url: `/locations`, method: 'GET' });
  };

  /**
   * Add a new location to the inventory system.
   * @summary Create a new location
   */
  const createLocation = (locationCreate: LocationCreate) => {
    return customInstance<Location>({
      url: `/locations`,
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      data: locationCreate,
    });
  };

  /**
   * Retrieve a specific location using its unique ID.
   * @summary Get a single location by ID
   */
  const getLocationById = (locationId: string) => {
    return customInstance<Location>({
      url: `/locations/${locationId}`,
      method: 'GET',
    });
  };

  /**
   * Update details of an existing location.
   * @summary Update a location
   */
  const updateLocation = (
    locationId: string,
    locationUpdate: LocationUpdate
  ) => {
    return customInstance<Location>({
      url: `/locations/${locationId}`,
      method: 'PATCH',
      headers: { 'Content-Type': 'application/json' },
      data: locationUpdate,
    });
  };

  /**
   * Remove a location from the system. This might also require handling related data (staff, inventory, menu items, etc.).
   * @summary Delete a location
   */
  const deleteLocation = (locationId: string) => {
    return customInstance<void>({
      url: `/locations/${locationId}`,
      method: 'DELETE',
    });
  };

  /**
   * Retrieve a list of all staff members working at the specified location.
   * @summary List staff for a specific location
   */
  const listStaffByLocation = (locationId: string) => {
    return customInstance<Staff[]>({
      url: `/locations/${locationId}/staff`,
      method: 'GET',
    });
  };

  /**
   * Add a new staff member associated with the specified location.
   * @summary Create a new staff member for a location
   */
  const createStaffAtLocation = (
    locationId: string,
    staffCreate: StaffCreate
  ) => {
    return customInstance<Staff>({
      url: `/locations/${locationId}/staff`,
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      data: staffCreate,
    });
  };

  /**
   * Retrieve a specific staff member using their unique ID within the context of a location.
   * @summary Get a staff member by ID for a specific location
   */
  const getStaffByLocationAndId = (locationId: string, staffId: string) => {
    return customInstance<Staff>({
      url: `/locations/${locationId}/staff/${staffId}`,
      method: 'GET',
    });
  };

  /**
   * Update details of an existing staff member associated with the specified location.
   * @summary Update a staff member for a location
   */
  const updateStaffAtLocation = (
    locationId: string,
    staffId: string,
    staffUpdate: StaffUpdate
  ) => {
    return customInstance<Staff>({
      url: `/locations/${locationId}/staff/${staffId}`,
      method: 'PATCH',
      headers: { 'Content-Type': 'application/json' },
      data: staffUpdate,
    });
  };

  /**
   * Remove a staff member association with the specified location.
   * @summary Delete a staff member from a location
   */
  const deleteStaffAtLocation = (locationId: string, staffId: string) => {
    return customInstance<void>({
      url: `/locations/${locationId}/staff/${staffId}`,
      method: 'DELETE',
    });
  };

  /**
   * Retrieve a list of all defined inventory ingredients.
   * @summary List all ingredients
   */
  const listIngredients = () => {
    return customInstance<Ingredient[]>({ url: `/ingredients`, method: 'GET' });
  };

  /**
   * Add a new ingredient definition to the inventory.
   * @summary Create a new ingredient
   */
  const createIngredient = (ingredientCreate: IngredientCreate) => {
    return customInstance<Ingredient>({
      url: `/ingredients`,
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      data: ingredientCreate,
    });
  };

  /**
   * Retrieve a specific ingredient definition using its unique ID.
   * @summary Get an ingredient by ID
   */
  const getIngredientById = (ingredientId: string) => {
    return customInstance<Ingredient>({
      url: `/ingredients/${ingredientId}`,
      method: 'GET',
    });
  };

  /**
   * Update details of an existing ingredient definition.
   * @summary Update an ingredient
   */
  const updateIngredient = (
    ingredientId: string,
    ingredientUpdate: IngredientUpdate
  ) => {
    return customInstance<Ingredient>({
      url: `/ingredients/${ingredientId}`,
      method: 'PATCH',
      headers: { 'Content-Type': 'application/json' },
      data: ingredientUpdate,
    });
  };

  /**
   * Remove an ingredient definition from the system. This might require checks for existing stock or recipe links.
   * @summary Delete an ingredient
   */
  const deleteIngredient = (ingredientId: string) => {
    return customInstance<void>({
      url: `/ingredients/${ingredientId}`,
      method: 'DELETE',
    });
  };

  /**
   * Retrieve a list of all defined recipes.
   * @summary List all recipes
   */
  const listRecipes = () => {
    return customInstance<Recipe[]>({ url: `/recipes`, method: 'GET' });
  };

  /**
   * Add a new recipe definition.
   * @summary Create a new recipe
   */
  const createRecipe = (recipeCreate: RecipeCreate) => {
    return customInstance<Recipe>({
      url: `/recipes`,
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      data: recipeCreate,
    });
  };

  /**
   * Retrieve a specific recipe using its unique ID.
   * @summary Get a recipe by ID
   */
  const getRecipeById = (recipeId: string) => {
    return customInstance<Recipe>({
      url: `/recipes/${recipeId}`,
      method: 'GET',
    });
  };

  /**
   * Update details of an existing recipe definition.
   * @summary Update a recipe
   */
  const updateRecipe = (recipeId: string, recipeUpdate: RecipeUpdate) => {
    return customInstance<Recipe>({
      url: `/recipes/${recipeId}`,
      method: 'PATCH',
      headers: { 'Content-Type': 'application/json' },
      data: recipeUpdate,
    });
  };

  /**
   * Remove a recipe definition. This might require checks for existing ingredient links or menu item links.
   * @summary Delete a recipe
   */
  const deleteRecipe = (recipeId: string) => {
    return customInstance<void>({
      url: `/recipes/${recipeId}`,
      method: 'DELETE',
    });
  };

  /**
   * Retrieve a list of all ingredients required for the specified recipe, including their quantities.
   * @summary List ingredient links for a recipe
   */
  const listRecipeIngredientLinks = (recipeId: string) => {
    return customInstance<RecipeIngredientLink[]>({
      url: `/recipes/${recipeId}/ingredientLinks`,
      method: 'GET',
    });
  };

  /**
   * Link an ingredient to a recipe with a specific required quantity.
   * @summary Add an ingredient to a recipe
   */
  const createRecipeIngredientLink = (
    recipeId: string,
    recipeIngredientLinkCreate: RecipeIngredientLinkCreate
  ) => {
    return customInstance<RecipeIngredientLink>({
      url: `/recipes/${recipeId}/ingredientLinks`,
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      data: recipeIngredientLinkCreate,
    });
  };

  /**
   * Remove a specific ingredient requirement from a recipe.
   * @summary Remove a recipe ingredient link
   */
  const deleteRecipeIngredientLink = (
    recipeId: string,
    recipeIngredientLinkId: string
  ) => {
    return customInstance<void>({
      url: `/recipes/${recipeId}/ingredientLinks/${recipeIngredientLinkId}`,
      method: 'DELETE',
    });
  };

  /**
   * Retrieve a list of all defined modifier groups (e.g., "Milk Options").
   * @summary List all modifiers
   */
  const listModifiers = () => {
    return customInstance<Modifier[]>({ url: `/modifiers`, method: 'GET' });
  };

  /**
   * Add a new modifier group definition.
   * @summary Create a new modifier group
   */
  const createModifier = (modifierCreate: ModifierCreate) => {
    return customInstance<Modifier>({
      url: `/modifiers`,
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      data: modifierCreate,
    });
  };

  /**
   * Retrieve a specific modifier group using its unique ID.
   * @summary Get a modifier by ID
   */
  const getModifierById = (modifierId: string) => {
    return customInstance<Modifier>({
      url: `/modifiers/${modifierId}`,
      method: 'GET',
    });
  };

  /**
   * Update details of an existing modifier group definition.
   * @summary Update a modifier group
   */
  const updateModifier = (
    modifierId: string,
    modifierUpdate: ModifierUpdate
  ) => {
    return customInstance<Modifier>({
      url: `/modifiers/${modifierId}`,
      method: 'PATCH',
      headers: { 'Content-Type': 'application/json' },
      data: modifierUpdate,
    });
  };

  /**
   * Remove a modifier group definition. This might require checks for existing options or menu item links.
   * @summary Delete a modifier group
   */
  const deleteModifier = (modifierId: string) => {
    return customInstance<void>({
      url: `/modifiers/${modifierId}`,
      method: 'DELETE',
    });
  };

  /**
   * Retrieve a list of all individual options within the specified modifier group.
   * @summary List options for a modifier group
   */
  const listModifierOptions = (modifierId: string) => {
    return customInstance<ModifierOption[]>({
      url: `/modifiers/${modifierId}/options`,
      method: 'GET',
    });
  };

  /**
   * Add a new individual option to an existing modifier group.
   * @summary Create a new modifier option for a group
   */
  const createModifierOption = (
    modifierId: string,
    modifierOptionCreate: ModifierOptionCreate
  ) => {
    return customInstance<ModifierOption>({
      url: `/modifiers/${modifierId}/options`,
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      data: modifierOptionCreate,
    });
  };

  /**
   * Retrieve a specific modifier option using its unique ID within the context of a modifier group.
   * @summary Get a modifier option by ID for a group
   */
  const getModifierOptionById = (
    modifierId: string,
    modifierOptionId: string
  ) => {
    return customInstance<ModifierOption>({
      url: `/modifiers/${modifierId}/options/${modifierOptionId}`,
      method: 'GET',
    });
  };

  /**
   * Update details of an existing modifier option within the specified modifier group.
   * @summary Update a modifier option for a group
   */
  const updateModifierOption = (
    modifierId: string,
    modifierOptionId: string,
    modifierOptionUpdate: ModifierOptionUpdate
  ) => {
    return customInstance<ModifierOption>({
      url: `/modifiers/${modifierId}/options/${modifierOptionId}`,
      method: 'PATCH',
      headers: { 'Content-Type': 'application/json' },
      data: modifierOptionUpdate,
    });
  };

  /**
   * Remove a specific modifier option from the specified modifier group.
   * @summary Delete a modifier option from a group
   */
  const deleteModifierOption = (
    modifierId: string,
    modifierOptionId: string
  ) => {
    return customInstance<void>({
      url: `/modifiers/${modifierId}/options/${modifierOptionId}`,
      method: 'DELETE',
    });
  };

  /**
   * Retrieve a list of all menu items available at the specified location, including prices and enabled modifiers.
   * @summary List menu items for a specific location
   */
  const listLocationMenuItems = (locationId: string) => {
    return customInstance<LocationMenuItem[]>({
      url: `/locations/${locationId}/menuItems`,
      method: 'GET',
    });
  };

  /**
   * Create a link between a recipe and a location, defining its price and available modifiers as a menu item.
   * @summary Add a recipe as a menu item to a location
   */
  const createLocationMenuItem = (
    locationId: string,
    locationMenuItemCreate: LocationMenuItemCreate
  ) => {
    return customInstance<LocationMenuItem>({
      url: `/locations/${locationId}/menuItems`,
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      data: locationMenuItemCreate,
    });
  };

  /**
   * Retrieve a specific menu item using its unique ID within the context of a location.
   * @summary Get a menu item by ID for a location
   */
  const getLocationMenuItemById = (locationId: string, menuItemId: string) => {
    return customInstance<LocationMenuItem>({
      url: `/locations/${locationId}/menuItems/${menuItemId}`,
      method: 'GET',
    });
  };

  /**
   * Update details (like price or modifiers) of an existing menu item at the specified location.
   * @summary Update a menu item for a location
   */
  const updateLocationMenuItem = (
    locationId: string,
    menuItemId: string,
    locationMenuItemUpdate: LocationMenuItemUpdate
  ) => {
    return customInstance<LocationMenuItem>({
      url: `/locations/${locationId}/menuItems/${menuItemId}`,
      method: 'PATCH',
      headers: { 'Content-Type': 'application/json' },
      data: locationMenuItemUpdate,
    });
  };

  /**
   * Make a menu item unavailable at a specific location.
   * @summary Remove a menu item from a location
   */
  const deleteLocationMenuItem = (locationId: string, menuItemId: string) => {
    return customInstance<void>({
      url: `/locations/${locationId}/menuItems/${menuItemId}`,
      method: 'DELETE',
    });
  };

  /**
   * Retrieve a list of location-specific costs for ingredients.
   * @summary List ingredient costs for a specific location
   */
  const listLocationIngredientCosts = (locationId: string) => {
    return customInstance<LocationIngredientCost[]>({
      url: `/locations/${locationId}/ingredientCosts`,
      method: 'GET',
    });
  };

  /**
   * Define the cost of an ingredient specifically for a location.
   * @summary Create a location-specific ingredient cost record
   */
  const createLocationIngredientCost = (
    locationId: string,
    locationIngredientCostCreate: LocationIngredientCostCreate
  ) => {
    return customInstance<LocationIngredientCost>({
      url: `/locations/${locationId}/ingredientCosts`,
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      data: locationIngredientCostCreate,
    });
  };

  /**
   * Retrieve a specific ingredient cost record for a location using its unique ID.
   * @summary Get a location-specific ingredient cost by ID
   */
  const getLocationIngredientCostById = (
    locationId: string,
    locationIngredientCostId: string
  ) => {
    return customInstance<LocationIngredientCost>({
      url: `/locations/${locationId}/ingredientCosts/${locationIngredientCostId}`,
      method: 'GET',
    });
  };

  /**
   * Update the cost value for an existing ingredient cost record at a location.
   * @summary Update a location-specific ingredient cost
   */
  const updateLocationIngredientCost = (
    locationId: string,
    locationIngredientCostId: string,
    locationIngredientCostUpdate: LocationIngredientCostUpdate
  ) => {
    return customInstance<LocationIngredientCost>({
      url: `/locations/${locationId}/ingredientCosts/${locationIngredientCostId}`,
      method: 'PATCH',
      headers: { 'Content-Type': 'application/json' },
      data: locationIngredientCostUpdate,
    });
  };

  /**
   * Remove a specific ingredient cost record for a location.
   * @summary Delete a location-specific ingredient cost record
   */
  const deleteLocationIngredientCost = (
    locationId: string,
    locationIngredientCostId: string
  ) => {
    return customInstance<void>({
      url: `/locations/${locationId}/ingredientCosts/${locationIngredientCostId}`,
      method: 'DELETE',
    });
  };

  /**
   * Retrieve current inventory stock levels, optionally filtered by location or ingredient. Includes embedded location and ingredient summaries.
   * @summary List inventory stock levels
   */
  const listInventoryStock = (params?: ListInventoryStockParams) => {
    return customInstance<InventoryStock[]>({
      url: `/inventory_stock`,
      method: 'GET',
      params,
    });
  };

  /**
   * Create a record for an ingredient's stock level at a specific location. This is typically for initial setup or adding an item to a location for the first time. Subsequent changes should use movements.
   * @summary Create a new inventory stock record
   */
  const createInventoryStock = (inventoryStockCreate: InventoryStockCreate) => {
    return customInstance<InventoryStock>({
      url: `/inventory_stock`,
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      data: inventoryStockCreate,
    });
  };

  /**
   * Retrieve a specific inventory stock record. Includes embedded location and ingredient summaries.
   * @summary Get an inventory stock record by ID
   */
  const getInventoryStockById = (stockId: string) => {
    return customInstance<InventoryStock>({
      url: `/inventory_stock/${stockId}`,
      method: 'GET',
    });
  };

  /**
   * Directly adjust the quantity of a specific ingredient at a location. Consider using Inventory Movements for auditable changes.
   * @summary Update an inventory stock entry (e.g., adjust quantity)
   */
  const updateInventoryStock = (
    stockId: string,
    inventoryStockUpdate: InventoryStockUpdate
  ) => {
    return customInstance<InventoryStock>({
      url: `/inventory_stock/${stockId}`,
      method: 'PATCH',
      headers: { 'Content-Type': 'application/json' },
      data: inventoryStockUpdate,
    });
  };

  /**
   * Remove a specific ingredient's stock record for a location. Use with caution as this removes the historical link.
   * @summary Delete an inventory stock record
   */
  const deleteInventoryStock = (stockId: string) => {
    return customInstance<void>({
      url: `/inventory_stock/${stockId}`,
      method: 'DELETE',
    });
  };

  /**
   * Retrieve a history of inventory stock changes (movements), useful for tracking usage, waste, and restocking. Includes embedded ingredient summaries.
   * @summary List inventory movements (stock changes)
   */
  const listInventoryMovements = (params?: ListInventoryMovementsParams) => {
    return customInstance<InventoryMovement[]>({
      url: `/inventory_movements`,
      method: 'GET',
      params,
    });
  };

  /**
   * Record a change in stock for a specific ingredient at a location. This is the preferred way to track stock changes over direct stock updates.
   * @summary Create a new inventory movement (e.g., log waste or restock)
   */
  const createInventoryMovement = (
    inventoryMovementCreate: InventoryMovementCreate
  ) => {
    return customInstance<InventoryMovement>({
      url: `/inventory_movements`,
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      data: inventoryMovementCreate,
    });
  };

  return {
    listLocations,
    createLocation,
    getLocationById,
    updateLocation,
    deleteLocation,
    listStaffByLocation,
    createStaffAtLocation,
    getStaffByLocationAndId,
    updateStaffAtLocation,
    deleteStaffAtLocation,
    listIngredients,
    createIngredient,
    getIngredientById,
    updateIngredient,
    deleteIngredient,
    listRecipes,
    createRecipe,
    getRecipeById,
    updateRecipe,
    deleteRecipe,
    listRecipeIngredientLinks,
    createRecipeIngredientLink,
    deleteRecipeIngredientLink,
    listModifiers,
    createModifier,
    getModifierById,
    updateModifier,
    deleteModifier,
    listModifierOptions,
    createModifierOption,
    getModifierOptionById,
    updateModifierOption,
    deleteModifierOption,
    listLocationMenuItems,
    createLocationMenuItem,
    getLocationMenuItemById,
    updateLocationMenuItem,
    deleteLocationMenuItem,
    listLocationIngredientCosts,
    createLocationIngredientCost,
    getLocationIngredientCostById,
    updateLocationIngredientCost,
    deleteLocationIngredientCost,
    listInventoryStock,
    createInventoryStock,
    getInventoryStockById,
    updateInventoryStock,
    deleteInventoryStock,
    listInventoryMovements,
    createInventoryMovement,
  };
};
export type ListLocationsResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof getNoryInventoryAPI>['listLocations']>>
>;
export type CreateLocationResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof getNoryInventoryAPI>['createLocation']>>
>;
export type GetLocationByIdResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof getNoryInventoryAPI>['getLocationById']>>
>;
export type UpdateLocationResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof getNoryInventoryAPI>['updateLocation']>>
>;
export type DeleteLocationResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof getNoryInventoryAPI>['deleteLocation']>>
>;
export type ListStaffByLocationResult = NonNullable<
  Awaited<
    ReturnType<ReturnType<typeof getNoryInventoryAPI>['listStaffByLocation']>
  >
>;
export type CreateStaffAtLocationResult = NonNullable<
  Awaited<
    ReturnType<ReturnType<typeof getNoryInventoryAPI>['createStaffAtLocation']>
  >
>;
export type GetStaffByLocationAndIdResult = NonNullable<
  Awaited<
    ReturnType<
      ReturnType<typeof getNoryInventoryAPI>['getStaffByLocationAndId']
    >
  >
>;
export type UpdateStaffAtLocationResult = NonNullable<
  Awaited<
    ReturnType<ReturnType<typeof getNoryInventoryAPI>['updateStaffAtLocation']>
  >
>;
export type DeleteStaffAtLocationResult = NonNullable<
  Awaited<
    ReturnType<ReturnType<typeof getNoryInventoryAPI>['deleteStaffAtLocation']>
  >
>;
export type ListIngredientsResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof getNoryInventoryAPI>['listIngredients']>>
>;
export type CreateIngredientResult = NonNullable<
  Awaited<
    ReturnType<ReturnType<typeof getNoryInventoryAPI>['createIngredient']>
  >
>;
export type GetIngredientByIdResult = NonNullable<
  Awaited<
    ReturnType<ReturnType<typeof getNoryInventoryAPI>['getIngredientById']>
  >
>;
export type UpdateIngredientResult = NonNullable<
  Awaited<
    ReturnType<ReturnType<typeof getNoryInventoryAPI>['updateIngredient']>
  >
>;
export type DeleteIngredientResult = NonNullable<
  Awaited<
    ReturnType<ReturnType<typeof getNoryInventoryAPI>['deleteIngredient']>
  >
>;
export type ListRecipesResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof getNoryInventoryAPI>['listRecipes']>>
>;
export type CreateRecipeResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof getNoryInventoryAPI>['createRecipe']>>
>;
export type GetRecipeByIdResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof getNoryInventoryAPI>['getRecipeById']>>
>;
export type UpdateRecipeResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof getNoryInventoryAPI>['updateRecipe']>>
>;
export type DeleteRecipeResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof getNoryInventoryAPI>['deleteRecipe']>>
>;
export type ListRecipeIngredientLinksResult = NonNullable<
  Awaited<
    ReturnType<
      ReturnType<typeof getNoryInventoryAPI>['listRecipeIngredientLinks']
    >
  >
>;
export type CreateRecipeIngredientLinkResult = NonNullable<
  Awaited<
    ReturnType<
      ReturnType<typeof getNoryInventoryAPI>['createRecipeIngredientLink']
    >
  >
>;
export type DeleteRecipeIngredientLinkResult = NonNullable<
  Awaited<
    ReturnType<
      ReturnType<typeof getNoryInventoryAPI>['deleteRecipeIngredientLink']
    >
  >
>;
export type ListModifiersResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof getNoryInventoryAPI>['listModifiers']>>
>;
export type CreateModifierResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof getNoryInventoryAPI>['createModifier']>>
>;
export type GetModifierByIdResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof getNoryInventoryAPI>['getModifierById']>>
>;
export type UpdateModifierResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof getNoryInventoryAPI>['updateModifier']>>
>;
export type DeleteModifierResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof getNoryInventoryAPI>['deleteModifier']>>
>;
export type ListModifierOptionsResult = NonNullable<
  Awaited<
    ReturnType<ReturnType<typeof getNoryInventoryAPI>['listModifierOptions']>
  >
>;
export type CreateModifierOptionResult = NonNullable<
  Awaited<
    ReturnType<ReturnType<typeof getNoryInventoryAPI>['createModifierOption']>
  >
>;
export type GetModifierOptionByIdResult = NonNullable<
  Awaited<
    ReturnType<ReturnType<typeof getNoryInventoryAPI>['getModifierOptionById']>
  >
>;
export type UpdateModifierOptionResult = NonNullable<
  Awaited<
    ReturnType<ReturnType<typeof getNoryInventoryAPI>['updateModifierOption']>
  >
>;
export type DeleteModifierOptionResult = NonNullable<
  Awaited<
    ReturnType<ReturnType<typeof getNoryInventoryAPI>['deleteModifierOption']>
  >
>;
export type ListLocationMenuItemsResult = NonNullable<
  Awaited<
    ReturnType<ReturnType<typeof getNoryInventoryAPI>['listLocationMenuItems']>
  >
>;
export type CreateLocationMenuItemResult = NonNullable<
  Awaited<
    ReturnType<ReturnType<typeof getNoryInventoryAPI>['createLocationMenuItem']>
  >
>;
export type GetLocationMenuItemByIdResult = NonNullable<
  Awaited<
    ReturnType<
      ReturnType<typeof getNoryInventoryAPI>['getLocationMenuItemById']
    >
  >
>;
export type UpdateLocationMenuItemResult = NonNullable<
  Awaited<
    ReturnType<ReturnType<typeof getNoryInventoryAPI>['updateLocationMenuItem']>
  >
>;
export type DeleteLocationMenuItemResult = NonNullable<
  Awaited<
    ReturnType<ReturnType<typeof getNoryInventoryAPI>['deleteLocationMenuItem']>
  >
>;
export type ListLocationIngredientCostsResult = NonNullable<
  Awaited<
    ReturnType<
      ReturnType<typeof getNoryInventoryAPI>['listLocationIngredientCosts']
    >
  >
>;
export type CreateLocationIngredientCostResult = NonNullable<
  Awaited<
    ReturnType<
      ReturnType<typeof getNoryInventoryAPI>['createLocationIngredientCost']
    >
  >
>;
export type GetLocationIngredientCostByIdResult = NonNullable<
  Awaited<
    ReturnType<
      ReturnType<typeof getNoryInventoryAPI>['getLocationIngredientCostById']
    >
  >
>;
export type UpdateLocationIngredientCostResult = NonNullable<
  Awaited<
    ReturnType<
      ReturnType<typeof getNoryInventoryAPI>['updateLocationIngredientCost']
    >
  >
>;
export type DeleteLocationIngredientCostResult = NonNullable<
  Awaited<
    ReturnType<
      ReturnType<typeof getNoryInventoryAPI>['deleteLocationIngredientCost']
    >
  >
>;
export type ListInventoryStockResult = NonNullable<
  Awaited<
    ReturnType<ReturnType<typeof getNoryInventoryAPI>['listInventoryStock']>
  >
>;
export type CreateInventoryStockResult = NonNullable<
  Awaited<
    ReturnType<ReturnType<typeof getNoryInventoryAPI>['createInventoryStock']>
  >
>;
export type GetInventoryStockByIdResult = NonNullable<
  Awaited<
    ReturnType<ReturnType<typeof getNoryInventoryAPI>['getInventoryStockById']>
  >
>;
export type UpdateInventoryStockResult = NonNullable<
  Awaited<
    ReturnType<ReturnType<typeof getNoryInventoryAPI>['updateInventoryStock']>
  >
>;
export type DeleteInventoryStockResult = NonNullable<
  Awaited<
    ReturnType<ReturnType<typeof getNoryInventoryAPI>['deleteInventoryStock']>
  >
>;
export type ListInventoryMovementsResult = NonNullable<
  Awaited<
    ReturnType<ReturnType<typeof getNoryInventoryAPI>['listInventoryMovements']>
  >
>;
export type CreateInventoryMovementResult = NonNullable<
  Awaited<
    ReturnType<
      ReturnType<typeof getNoryInventoryAPI>['createInventoryMovement']
    >
  >
>;
