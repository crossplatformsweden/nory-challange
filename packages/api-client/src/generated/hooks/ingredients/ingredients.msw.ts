/**
 * Generated by orval v6.31.0 🍺
 * Do not edit manually.
 * Nory Inventory API
 * API for managing inventory, staff, locations, recipes, menu items, and related data for Nory.
 * OpenAPI spec version: 1.0.0
 */
import { faker } from '@faker-js/faker';
import { HttpResponse, delay, http } from 'msw';
import type { Ingredient } from '../noryInventoryAPI.schemas';

export const getListIngredientsResponseMock = (): Ingredient[] =>
  Array.from(
    { length: faker.number.int({ min: 1, max: 10 }) },
    (_, i) => i + 1
  ).map(() => ({
    cost: faker.helpers.arrayElement([
      faker.helpers.arrayElement([
        faker.number.int({ min: 0, max: undefined }),
        null,
      ]),
      undefined,
    ]),
    id: faker.word.sample(),
    name: faker.word.sample(),
    unit: faker.word.sample(),
  }));

export const getCreateIngredientResponseMock = (
  overrideResponse: Partial<Ingredient> = {}
): Ingredient => ({
  cost: faker.helpers.arrayElement([
    faker.helpers.arrayElement([
      faker.number.int({ min: 0, max: undefined }),
      null,
    ]),
    undefined,
  ]),
  id: faker.word.sample(),
  name: faker.word.sample(),
  unit: faker.word.sample(),
  ...overrideResponse,
});

export const getGetIngredientByIdResponseMock = (
  overrideResponse: Partial<Ingredient> = {}
): Ingredient => ({
  cost: faker.helpers.arrayElement([
    faker.helpers.arrayElement([
      faker.number.int({ min: 0, max: undefined }),
      null,
    ]),
    undefined,
  ]),
  id: faker.word.sample(),
  name: faker.word.sample(),
  unit: faker.word.sample(),
  ...overrideResponse,
});

export const getUpdateIngredientResponseMock = (
  overrideResponse: Partial<Ingredient> = {}
): Ingredient => ({
  cost: faker.helpers.arrayElement([
    faker.helpers.arrayElement([
      faker.number.int({ min: 0, max: undefined }),
      null,
    ]),
    undefined,
  ]),
  id: faker.word.sample(),
  name: faker.word.sample(),
  unit: faker.word.sample(),
  ...overrideResponse,
});

export const getListIngredientsMockHandler = (
  overrideResponse?:
    | Ingredient[]
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0]
      ) => Promise<Ingredient[]> | Ingredient[])
) => {
  return http.get('*/ingredients', async (info) => {
    await delay(1000);
    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === 'function'
            ? await overrideResponse(info)
            : overrideResponse
          : getListIngredientsResponseMock()
      ),
      {
        status: 200,
        headers: {
          'Content-Type': 'application/json',
        },
      }
    );
  });
};

export const getCreateIngredientMockHandler = (
  overrideResponse?:
    | Ingredient
    | ((
        info: Parameters<Parameters<typeof http.post>[1]>[0]
      ) => Promise<Ingredient> | Ingredient)
) => {
  return http.post('*/ingredients', async (info) => {
    await delay(1000);
    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === 'function'
            ? await overrideResponse(info)
            : overrideResponse
          : getCreateIngredientResponseMock()
      ),
      {
        status: 201,
        headers: {
          'Content-Type': 'application/json',
        },
      }
    );
  });
};

export const getGetIngredientByIdMockHandler = (
  overrideResponse?:
    | Ingredient
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0]
      ) => Promise<Ingredient> | Ingredient)
) => {
  return http.get('*/ingredients/:ingredientId', async (info) => {
    await delay(1000);
    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === 'function'
            ? await overrideResponse(info)
            : overrideResponse
          : getGetIngredientByIdResponseMock()
      ),
      {
        status: 200,
        headers: {
          'Content-Type': 'application/json',
        },
      }
    );
  });
};

export const getUpdateIngredientMockHandler = (
  overrideResponse?:
    | Ingredient
    | ((
        info: Parameters<Parameters<typeof http.patch>[1]>[0]
      ) => Promise<Ingredient> | Ingredient)
) => {
  return http.patch('*/ingredients/:ingredientId', async (info) => {
    await delay(1000);
    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === 'function'
            ? await overrideResponse(info)
            : overrideResponse
          : getUpdateIngredientResponseMock()
      ),
      {
        status: 200,
        headers: {
          'Content-Type': 'application/json',
        },
      }
    );
  });
};

export const getDeleteIngredientMockHandler = () => {
  return http.delete('*/ingredients/:ingredientId', async () => {
    await delay(1000);
    return new HttpResponse(null, {
      status: 204,
      headers: {
        'Content-Type': 'application/json',
      },
    });
  });
};
export const getIngredientsMock = () => [
  getListIngredientsMockHandler(),
  getCreateIngredientMockHandler(),
  getGetIngredientByIdMockHandler(),
  getUpdateIngredientMockHandler(),
  getDeleteIngredientMockHandler(),
];
