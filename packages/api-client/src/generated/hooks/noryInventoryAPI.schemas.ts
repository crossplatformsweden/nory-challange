/**
 * Generated by orval v6.31.0 üç∫
 * Do not edit manually.
 * Nory Inventory API
 * API for managing inventory, staff, locations, recipes, menu items, and related data for Nory.
 * OpenAPI spec version: 1.0.0
 */
export type ListInventoryMovementsType =
  (typeof ListInventoryMovementsType)[keyof typeof ListInventoryMovementsType];

export const ListInventoryMovementsType = {
  waste: 'waste',
  restock: 'restock',
  sale: 'sale',
  adjustment: 'adjustment',
  transfer_in: 'transfer_in',
  transfer_out: 'transfer_out',
} as const;

export type ListInventoryMovementsParams = {
  /**
   * Optional, filter movements by location ID.
   */
  locationId?: string;
  /**
   * Optional, filter movements by ingredient ID.
   */
  ingredientId?: string;
  /**
   * Optional, filter movements by type.
   */
  type?: ListInventoryMovementsType;
  /**
   * Optional, filter movements from this timestamp onwards.
   */
  startTime?: string;
  /**
   * Optional, filter movements up to this timestamp.
   */
  endTime?: string;
};

export type ListInventoryStockParams = {
  /**
   * Optional, filter stock by location ID.
   */
  locationId?: string;
  /**
   * Optional, filter stock by ingredient ID.
   */
  ingredientId?: string;
};

/**
 * An unexpected error occurred on the server.
 */
export type InternalServerErrorResponse = ErrorResponse;

/**
 * The request could not be completed due to a conflict with the current state of the resource.
 */
export type ConflictResponse = ErrorResponse;

/**
 * The request was malformed or invalid.
 */
export type BadRequestResponse = ErrorResponse;

/**
 * The specified resource was not found.
 */
export type NotFoundResponse = ErrorResponse;

/**
 * The type of inventory movement.
 */
export type InventoryMovementCreateType =
  (typeof InventoryMovementCreateType)[keyof typeof InventoryMovementCreateType];

export const InventoryMovementCreateType = {
  waste: 'waste',
  restock: 'restock',
  sale: 'sale',
  adjustment: 'adjustment',
  transfer_in: 'transfer_in',
  transfer_out: 'transfer_out',
} as const;

/**
 * Data required to record a new inventory movement.
 */
export interface InventoryMovementCreate {
  /** The ID of the ingredient affected. */
  ingredientId: string;
  /** The ID of the location where the movement occurred. */
  locationId: string;
  /**
   * Optional notes about the movement.
   * @nullable
   */
  notes?: string | null;
  /** The change in quantity. Use positive for additions, negative for removals. */
  quantity: number;
  /**
   * The ID of the staff member recording the movement.
   * @nullable
   */
  recordedByStaffId?: string | null;
  /** The type of inventory movement. */
  type: InventoryMovementCreateType;
}

/**
 * The type of inventory movement.
 */
export type InventoryMovementType =
  (typeof InventoryMovementType)[keyof typeof InventoryMovementType];

export const InventoryMovementType = {
  waste: 'waste',
  restock: 'restock',
  sale: 'sale',
  adjustment: 'adjustment',
  transfer_in: 'transfer_in',
  transfer_out: 'transfer_out',
} as const;

/**
 * Represents a log of changes to inventory stock (e.g., sale, waste, restock).
 */
export interface InventoryMovement {
  /**
   * The cost per unit of the ingredient at the time of this movement.
   * @minimum 0
   * @nullable
   */
  readonly costPerUnit: number | null;
  /** Timestamp when the movement was recorded. */
  readonly createdAt: string;
  /** Unique identifier for the movement record. */
  readonly id: string;
  /** Summary of the related ingredient. */
  ingredient: IngredientSummary;
  /** The ID of the ingredient affected. */
  ingredientId: string;
  /** The ID of the location where the movement occurred. */
  locationId: string;
  /**
   * Optional notes about the movement (e.g., reason for waste).
   * @nullable
   */
  notes?: string | null;
  /** The change in quantity in the ingredient's standard unit. Positive for additions (restock, transfer_in), negative for removals (waste, sale, transfer_out). */
  quantity: number;
  /**
   * The ID of the staff member who recorded the movement, if applicable.
   * @nullable
   */
  recordedByStaffId?: string | null;
  /** The type of inventory movement. */
  type: InventoryMovementType;
  /**
   * The unit of measurement for this movement's quantity.
   * @minLength 1
   * @maxLength 50
   */
  readonly unit: string;
}

/**
 * Data for updating an existing inventory stock record. Only quantity is typically directly updated.
 */
export interface InventoryStockUpdate {
  /**
   * The new quantity for the ingredient at this location.
   * @minimum 0
   */
  quantity: number;
}

/**
 * Data required to create an initial inventory stock record for an ingredient at a location.
 */
export interface InventoryStockCreate {
  /** The ID of the ingredient. */
  ingredientId: string;
  /** The ID of the location. */
  locationId: string;
  /**
   * The initial quantity.
   * @minimum 0
   */
  quantity: number;
}

/**
 * Represents the current quantity of a specific ingredient at a specific location.
 */
export interface InventoryStock {
  /** Unique identifier for the stock record. */
  readonly id: string;
  /** Summary of the related ingredient. */
  ingredient: IngredientSummary;
  /** The ID of the ingredient. */
  readonly ingredientId: string;
  /** Summary of the related location. */
  location: LocationSummary;
  /** The ID of the location where the stock is held. */
  readonly locationId: string;
  /**
   * The current quantity of the ingredient at this location in its standard unit.
   * @minimum 0
   */
  quantity: number;
  /** Timestamp when the stock quantity was last updated. */
  readonly updatedAt: string;
}

/**
 * Data for updating a location-specific ingredient cost record.
 */
export interface LocationIngredientCostUpdate {
  /**
   * The updated cost per unit.
   * @minimum 0
   */
  costPerUnit: number;
}

/**
 * Data required to create a location-specific ingredient cost record.
 */
export interface LocationIngredientCostCreate {
  /**
   * The specific cost per unit of the ingredient at this location.
   * @minimum 0
   */
  costPerUnit: number;
  /** The ID of the ingredient. */
  ingredientId: string;
}

/**
 * Represents a location-specific cost for an ingredient, overriding the global ingredient cost.
 */
export interface LocationIngredientCost {
  /**
   * The specific cost per unit of the ingredient at this location.
   * @minimum 0
   */
  costPerUnit: number;
  /** Unique identifier for the location ingredient cost record. */
  readonly id: string;
  /** The ID of the ingredient. */
  readonly ingredientId: string;
  /** The ID of the location. */
  readonly locationId: string;
  /** Timestamp when the cost was last updated. */
  readonly updatedAt?: string;
}

/**
 * Data for updating an existing location menu item (e.g., changing price or available modifiers). All fields are optional.
 */
export interface LocationMenuItemUpdate {
  /**
   * An updated list of Modifier IDs enabled for this menu item at this location. Sends the complete list to replace the existing one.
   * @nullable
   */
  modifierIds?: string[] | null;
  /**
   * The updated price of the menu item at this location.
   * @minimum 0
   */
  price?: number;
  /** The updated ID of the recipe this menu item is based on. */
  recipeId?: string;
}

/**
 * Data required to link a recipe to a location as a menu item.
 */
export interface LocationMenuItemCreate {
  /**
   * A list of Modifier IDs to enable for this menu item at this location.
   * @nullable
   */
  modifierIds?: string[] | null;
  /**
   * The price of the menu item at this location.
   * @minimum 0
   */
  price: number;
  /** The ID of the recipe this menu item is based on. */
  recipeId: string;
}

/**
 * Links a specific recipe to a specific location as a menu item, indicating it is available there and defining its price and available modifiers. Represents the association resource.
 */
export interface LocationMenuItem {
  /** Unique identifier for the location menu item link. */
  readonly id: string;
  /** The ID of the location where this menu item is available. */
  readonly locationId: string;
  /**
   * A list of Modifier IDs whose options are available for this menu item at this location.
   * @nullable
   */
  modifierIds?: string[] | null;
  /**
   * The price of the menu item at this location.
   * @minimum 0
   */
  price: number;
  /** The ID of the recipe this menu item is based on. */
  recipeId: string;
}

/**
 * Data for updating an existing modifier option. All fields are optional.
 */
export interface ModifierOptionUpdate {
  /**
   * The updated name.
   * @minLength 1
   * @maxLength 255
   */
  name?: string;
  /**
   * The updated additional cost.
   * @minimum 0
   */
  price?: number;
}

/**
 * Data required to create a new modifier option.
 */
export interface ModifierOptionCreate {
  /**
   * The name of the modifier option.
   * @minLength 1
   * @maxLength 255
   */
  name: string;
  /**
   * The additional cost.
   * @minimum 0
   */
  price: number;
}

/**
 * Represents a single choice within a modifier group (e.g., "Oat Milk" within "Milk Options").
 */
export interface ModifierOption {
  /** Unique identifier for the modifier option. */
  readonly id: string;
  /** The ID of the modifier group this option belongs to. */
  readonly modifierId: string;
  /**
   * The name of the modifier option.
   * @minLength 1
   * @maxLength 255
   */
  name: string;
  /**
   * The additional cost associated with choosing this option.
   * @minimum 0
   */
  price: number;
}

/**
 * Data for updating an existing modifier group. All fields are optional.
 */
export interface ModifierUpdate {
  /**
   * The updated name.
   * @minLength 1
   * @maxLength 255
   */
  name?: string;
}

/**
 * Data required to create a new modifier group.
 */
export interface ModifierCreate {
  /**
   * The name of the modifier group.
   * @minLength 1
   * @maxLength 255
   */
  name: string;
}

/**
 * Represents a group of recipe options (e.g., "Milk Options", "Sweeteners").
 */
export interface Modifier {
  /** Unique identifier for the modifier group. */
  readonly id: string;
  /**
   * The name of the modifier group.
   * @minLength 1
   * @maxLength 255
   */
  name: string;
}

/**
 * Data required to create a new link between a recipe and an ingredient.
 */
export interface RecipeIngredientLinkCreate {
  /** The ID of the required ingredient. */
  ingredientId: string;
  /**
   * The quantity required.
   * @minimum 0
   */
  quantity: number;
}

/**
 * Links a recipe to an ingredient, specifying the required quantity for one serving/unit of the recipe. Represents the association resource.
 */
export interface RecipeIngredientLink {
  /** Unique identifier for the recipe-ingredient link. */
  readonly id: string;
  /** The ID of the required ingredient. */
  readonly ingredientId: string;
  /**
   * The quantity of the ingredient required per unit of the recipe in the ingredient's standard unit.
   * @minimum 0
   */
  quantity: number;
  /** The ID of the recipe this link belongs to. */
  readonly recipeId: string;
}

/**
 * Data for updating an existing recipe definition. All fields are optional.
 */
export interface RecipeUpdate {
  /**
   * The updated description.
   * @minLength 1
   * @maxLength 1000
   * @nullable
   */
  description?: string | null;
  /**
   * The updated name.
   * @minLength 1
   * @maxLength 255
   */
  name?: string;
}

/**
 * Data required to create a new recipe definition.
 */
export interface RecipeCreate {
  /**
   * A description of the recipe.
   * @minLength 1
   * @maxLength 1000
   * @nullable
   */
  description?: string | null;
  /**
   * The name of the recipe.
   * @minLength 1
   * @maxLength 255
   */
  name: string;
}

/**
 * Represents a definition of a menu item or product that uses ingredients.
 */
export interface Recipe {
  /**
   * A description of the recipe.
   * @minLength 1
   * @maxLength 1000
   * @nullable
   */
  description?: string | null;
  /** Unique identifier for the recipe definition. */
  readonly id: string;
  /**
   * The name of the recipe (e.g., 'Espresso', 'Cappuccino').
   * @minLength 1
   * @maxLength 255
   */
  name: string;
}

/**
 * Data for updating an existing ingredient definition. All fields are optional.
 */
export interface IngredientUpdate {
  /**
   * The updated average cost per unit.
   * @minimum 0
   * @nullable
   */
  cost?: number | null;
  /**
   * The updated name.
   * @minLength 1
   * @maxLength 255
   */
  name?: string;
  /**
   * The updated standard unit of measurement.
   * @minLength 1
   * @maxLength 50
   */
  unit?: string;
}

/**
 * Data required to create a new ingredient definition.
 */
export interface IngredientCreate {
  /**
   * The average cost per unit of the ingredient.
   * @minimum 0
   * @nullable
   */
  cost?: number | null;
  /**
   * The name of the ingredient.
   * @minLength 1
   * @maxLength 255
   */
  name: string;
  /**
   * The standard unit of measurement.
   * @minLength 1
   * @maxLength 50
   */
  unit: string;
}

/**
 * Represents a definition of an item that can be stocked (e.g., "Coffee Beans", "Milk").
 */
export interface Ingredient {
  /**
   * The average cost per unit of the ingredient globally or default if location-specific cost not set.
   * @minimum 0
   * @nullable
   */
  cost?: number | null;
  /** Unique identifier for the ingredient definition. */
  readonly id: string;
  /**
   * The name of the ingredient.
   * @minLength 1
   * @maxLength 255
   */
  name: string;
  /**
   * The standard unit of measurement for this item (e.g., kg, liter, pieces).
   * @minLength 1
   * @maxLength 50
   */
  unit: string;
}

/**
 * Data for updating an existing staff member. All fields are optional.
 */
export interface StaffUpdate {
  /**
   * Updated BIC/SWIFT code.
   * @nullable
   */
  bic?: string | null;
  /**
   * Updated date of birth.
   * @nullable
   */
  dob?: string | null;
  /**
   * Updated IBAN.
   * @nullable
   */
  iban?: string | null;
  /**
   * The updated full name.
   * @minLength 1
   * @maxLength 255
   */
  name?: string;
  /**
   * The updated role or position.
   * @minLength 1
   * @maxLength 100
   * @nullable
   */
  role?: string | null;
}

/**
 * Data required to create a new staff member.
 */
export interface StaffCreate {
  /**
   * Staff member's BIC/SWIFT code.
   * @nullable
   */
  bic?: string | null;
  /**
   * Date of birth.
   * @nullable
   */
  dob?: string | null;
  /**
   * Staff member's IBAN for payroll.
   * @nullable
   */
  iban?: string | null;
  /**
   * The full name of the staff member.
   * @minLength 1
   * @maxLength 255
   */
  name: string;
  /**
   * The role or position.
   * @minLength 1
   * @maxLength 100
   * @nullable
   */
  role?: string | null;
}

/**
 * Represents a staff member associated with a location.
 */
export interface Staff {
  /**
   * Staff member's BIC/SWIFT code.
   * @nullable
   */
  bic?: string | null;
  /**
   * Date of birth.
   * @nullable
   */
  dob?: string | null;
  /**
   * Staff member's IBAN for payroll.
   * @nullable
   */
  iban?: string | null;
  /** Unique identifier for the staff member. */
  readonly id: string;
  /** The ID of the location where the staff member primarily works. */
  readonly locationId: string;
  /**
   * The full name of the staff member.
   * @minLength 1
   * @maxLength 255
   */
  name: string;
  /**
   * The role or position of the staff member (e.g., Manager, Chef).
   * @minLength 1
   * @maxLength 100
   * @nullable
   */
  role?: string | null;
}

/**
 * Data for updating an existing location. All fields are optional.
 */
export interface LocationUpdate {
  /**
   * The updated physical address of the location.
   * @minLength 1
   * @maxLength 500
   * @nullable
   */
  address?: string | null;
  /**
   * The updated name of the location.
   * @minLength 1
   * @maxLength 255
   */
  name?: string;
}

/**
 * Data required to create a new location.
 */
export interface LocationCreate {
  /**
   * The physical address of the location.
   * @minLength 1
   * @maxLength 500
   * @nullable
   */
  address?: string | null;
  /**
   * The name of the location.
   * @minLength 1
   * @maxLength 255
   */
  name: string;
}

/**
 * Represents a physical location (restaurant, etc.).
 */
export interface Location {
  /**
   * The physical address of the location.
   * @minLength 1
   * @maxLength 500
   * @nullable
   */
  address?: string | null;
  /** Unique identifier for the location. */
  readonly id: string;
  /**
   * The name of the location.
   * @minLength 1
   * @maxLength 255
   */
  name: string;
}

/**
 * A summary of ingredient information for embedding.
 */
export interface IngredientSummary {
  /** Unique identifier for the ingredient definition. */
  readonly id: string;
  /**
   * The name of the ingredient.
   * @minLength 1
   * @maxLength 255
   */
  readonly name: string;
  /**
   * The standard unit of measurement for this item.
   * @minLength 1
   * @maxLength 50
   */
  readonly unit: string;
}

/**
 * A summary of location information for embedding.
 */
export interface LocationSummary {
  /** Unique identifier for the location. */
  readonly id: string;
  /**
   * The name of the location.
   * @minLength 1
   * @maxLength 255
   */
  readonly name: string;
}

/**
 * Optional field-specific validation errors.
 * @nullable
 */
export type ErrorResponseErrors = { [key: string]: string[] } | null;

/**
 * Standard error response structure.
 */
export interface ErrorResponse {
  /**
   * A human-readable explanation specific to this occurrence of the problem.
   * @minLength 1
   */
  detail: string;
  /**
   * Optional field-specific validation errors.
   * @nullable
   */
  errors?: ErrorResponseErrors;
  /**
   * A URI reference that identifies the specific occurrence of the problem.
   * @nullable
   */
  instance?: string | null;
  /**
   * The HTTP status code generated by the origin server.
   * @minimum 100
   * @maximum 599
   */
  status: number;
  /**
   * A short, human-readable summary of the problem type.
   * @minLength 1
   */
  title: string;
  /** A URI reference that identifies the problem type. */
  type: string;
}
