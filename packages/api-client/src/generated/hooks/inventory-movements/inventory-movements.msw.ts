/**
 * Generated by orval v6.31.0 🍺
 * Do not edit manually.
 * Nory Inventory API
 * API for managing inventory, staff, locations, recipes, menu items, and related data for Nory.
 * OpenAPI spec version: 1.0.0
 */
import { faker } from '@faker-js/faker';
import { HttpResponse, delay, http } from 'msw';
import type { InventoryMovement } from '../noryInventoryAPI.schemas';

export const getListInventoryMovementsResponseMock = (): InventoryMovement[] =>
  Array.from(
    { length: faker.number.int({ min: 1, max: 10 }) },
    (_, i) => i + 1
  ).map(() => ({
    costPerUnit: faker.helpers.arrayElement([
      faker.number.int({ min: 0, max: undefined }),
      null,
    ]),
    createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
    id: faker.word.sample(),
    ingredient: {
      id: faker.word.sample(),
      name: faker.word.sample(),
      unit: faker.word.sample(),
    },
    ingredientId: faker.word.sample(),
    locationId: faker.word.sample(),
    notes: faker.helpers.arrayElement([
      faker.helpers.arrayElement([faker.word.sample(), null]),
      undefined,
    ]),
    quantity: faker.number.int({ min: undefined, max: undefined }),
    recordedByStaffId: faker.helpers.arrayElement([
      faker.helpers.arrayElement([faker.word.sample(), null]),
      undefined,
    ]),
    type: faker.helpers.arrayElement([
      'waste',
      'restock',
      'sale',
      'adjustment',
      'transfer_in',
      'transfer_out',
    ] as const),
    unit: faker.word.sample(),
  }));

export const getCreateInventoryMovementResponseMock = (
  overrideResponse: Partial<InventoryMovement> = {}
): InventoryMovement => ({
  costPerUnit: faker.helpers.arrayElement([
    faker.number.int({ min: 0, max: undefined }),
    null,
  ]),
  createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
  id: faker.word.sample(),
  ingredient: {
    id: faker.word.sample(),
    name: faker.word.sample(),
    unit: faker.word.sample(),
  },
  ingredientId: faker.word.sample(),
  locationId: faker.word.sample(),
  notes: faker.helpers.arrayElement([
    faker.helpers.arrayElement([faker.word.sample(), null]),
    undefined,
  ]),
  quantity: faker.number.int({ min: undefined, max: undefined }),
  recordedByStaffId: faker.helpers.arrayElement([
    faker.helpers.arrayElement([faker.word.sample(), null]),
    undefined,
  ]),
  type: faker.helpers.arrayElement([
    'waste',
    'restock',
    'sale',
    'adjustment',
    'transfer_in',
    'transfer_out',
  ] as const),
  unit: faker.word.sample(),
  ...overrideResponse,
});

export const getListInventoryMovementsMockHandler = (
  overrideResponse?:
    | InventoryMovement[]
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0]
      ) => Promise<InventoryMovement[]> | InventoryMovement[])
) => {
  return http.get('*/inventory_movements', async (info) => {
    await delay(1000);
    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === 'function'
            ? await overrideResponse(info)
            : overrideResponse
          : getListInventoryMovementsResponseMock()
      ),
      {
        status: 200,
        headers: {
          'Content-Type': 'application/json',
        },
      }
    );
  });
};

export const getCreateInventoryMovementMockHandler = (
  overrideResponse?:
    | InventoryMovement
    | ((
        info: Parameters<Parameters<typeof http.post>[1]>[0]
      ) => Promise<InventoryMovement> | InventoryMovement)
) => {
  return http.post('*/inventory_movements', async (info) => {
    await delay(1000);
    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === 'function'
            ? await overrideResponse(info)
            : overrideResponse
          : getCreateInventoryMovementResponseMock()
      ),
      {
        status: 201,
        headers: {
          'Content-Type': 'application/json',
        },
      }
    );
  });
};
export const getInventoryMovementsMock = () => [
  getListInventoryMovementsMockHandler(),
  getCreateInventoryMovementMockHandler(),
];
