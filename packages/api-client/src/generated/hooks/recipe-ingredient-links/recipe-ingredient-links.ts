/**
 * Generated by orval v6.31.0 üç∫
 * Do not edit manually.
 * Nory Inventory API
 * API for managing inventory, staff, locations, recipes, menu items, and related data for Nory.
 * OpenAPI spec version: 1.0.0
 */
import { useMutation, useQuery } from '@tanstack/react-query';
import type {
  MutationFunction,
  QueryFunction,
  QueryKey,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from '@tanstack/react-query';
import axios from 'axios';
import type { AxiosError, AxiosRequestConfig, AxiosResponse } from 'axios';
import type {
  BadRequestResponse,
  ConflictResponse,
  InternalServerErrorResponse,
  NotFoundResponse,
  RecipeIngredientLink,
  RecipeIngredientLinkCreate,
} from '../noryInventoryAPI.schemas';

/**
 * Retrieve a list of all ingredients required for the specified recipe, including their quantities.
 * @summary List ingredient links for a recipe
 */
export const listRecipeIngredientLinks = (
  recipeId: string,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<RecipeIngredientLink[]>> => {
  return axios.get(`/recipes/${recipeId}/ingredientLinks`, options);
};

export const getListRecipeIngredientLinksQueryKey = (recipeId: string) => {
  return [`/recipes/${recipeId}/ingredientLinks`] as const;
};

export const getListRecipeIngredientLinksQueryOptions = <
  TData = Awaited<ReturnType<typeof listRecipeIngredientLinks>>,
  TError = AxiosError<NotFoundResponse | InternalServerErrorResponse>,
>(
  recipeId: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof listRecipeIngredientLinks>>,
        TError,
        TData
      >
    >;
    axios?: AxiosRequestConfig;
  }
) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getListRecipeIngredientLinksQueryKey(recipeId);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof listRecipeIngredientLinks>>
  > = ({ signal }) =>
    listRecipeIngredientLinks(recipeId, { signal, ...axiosOptions });

  return {
    queryKey,
    queryFn,
    enabled: !!recipeId,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof listRecipeIngredientLinks>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type ListRecipeIngredientLinksQueryResult = NonNullable<
  Awaited<ReturnType<typeof listRecipeIngredientLinks>>
>;
export type ListRecipeIngredientLinksQueryError = AxiosError<
  NotFoundResponse | InternalServerErrorResponse
>;

/**
 * @summary List ingredient links for a recipe
 */
export const useListRecipeIngredientLinks = <
  TData = Awaited<ReturnType<typeof listRecipeIngredientLinks>>,
  TError = AxiosError<NotFoundResponse | InternalServerErrorResponse>,
>(
  recipeId: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof listRecipeIngredientLinks>>,
        TError,
        TData
      >
    >;
    axios?: AxiosRequestConfig;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getListRecipeIngredientLinksQueryOptions(
    recipeId,
    options
  );

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * Link an ingredient to a recipe with a specific required quantity.
 * @summary Add an ingredient to a recipe
 */
export const createRecipeIngredientLink = (
  recipeId: string,
  recipeIngredientLinkCreate: RecipeIngredientLinkCreate,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<RecipeIngredientLink>> => {
  return axios.post(
    `/recipes/${recipeId}/ingredientLinks`,
    recipeIngredientLinkCreate,
    options
  );
};

export const getCreateRecipeIngredientLinkMutationOptions = <
  TError = AxiosError<
    | BadRequestResponse
    | NotFoundResponse
    | ConflictResponse
    | InternalServerErrorResponse
  >,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof createRecipeIngredientLink>>,
    TError,
    { recipeId: string; data: RecipeIngredientLinkCreate },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof createRecipeIngredientLink>>,
  TError,
  { recipeId: string; data: RecipeIngredientLinkCreate },
  TContext
> => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof createRecipeIngredientLink>>,
    { recipeId: string; data: RecipeIngredientLinkCreate }
  > = (props) => {
    const { recipeId, data } = props ?? {};

    return createRecipeIngredientLink(recipeId, data, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type CreateRecipeIngredientLinkMutationResult = NonNullable<
  Awaited<ReturnType<typeof createRecipeIngredientLink>>
>;
export type CreateRecipeIngredientLinkMutationBody = RecipeIngredientLinkCreate;
export type CreateRecipeIngredientLinkMutationError = AxiosError<
  | BadRequestResponse
  | NotFoundResponse
  | ConflictResponse
  | InternalServerErrorResponse
>;

/**
 * @summary Add an ingredient to a recipe
 */
export const useCreateRecipeIngredientLink = <
  TError = AxiosError<
    | BadRequestResponse
    | NotFoundResponse
    | ConflictResponse
    | InternalServerErrorResponse
  >,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof createRecipeIngredientLink>>,
    TError,
    { recipeId: string; data: RecipeIngredientLinkCreate },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationResult<
  Awaited<ReturnType<typeof createRecipeIngredientLink>>,
  TError,
  { recipeId: string; data: RecipeIngredientLinkCreate },
  TContext
> => {
  const mutationOptions = getCreateRecipeIngredientLinkMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * Remove a specific ingredient requirement from a recipe.
 * @summary Remove a recipe ingredient link
 */
export const deleteRecipeIngredientLink = (
  recipeId: string,
  recipeIngredientLinkId: string,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<void>> => {
  return axios.delete(
    `/recipes/${recipeId}/ingredientLinks/${recipeIngredientLinkId}`,
    options
  );
};

export const getDeleteRecipeIngredientLinkMutationOptions = <
  TError = AxiosError<NotFoundResponse | InternalServerErrorResponse>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteRecipeIngredientLink>>,
    TError,
    { recipeId: string; recipeIngredientLinkId: string },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteRecipeIngredientLink>>,
  TError,
  { recipeId: string; recipeIngredientLinkId: string },
  TContext
> => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteRecipeIngredientLink>>,
    { recipeId: string; recipeIngredientLinkId: string }
  > = (props) => {
    const { recipeId, recipeIngredientLinkId } = props ?? {};

    return deleteRecipeIngredientLink(
      recipeId,
      recipeIngredientLinkId,
      axiosOptions
    );
  };

  return { mutationFn, ...mutationOptions };
};

export type DeleteRecipeIngredientLinkMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteRecipeIngredientLink>>
>;

export type DeleteRecipeIngredientLinkMutationError = AxiosError<
  NotFoundResponse | InternalServerErrorResponse
>;

/**
 * @summary Remove a recipe ingredient link
 */
export const useDeleteRecipeIngredientLink = <
  TError = AxiosError<NotFoundResponse | InternalServerErrorResponse>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteRecipeIngredientLink>>,
    TError,
    { recipeId: string; recipeIngredientLinkId: string },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationResult<
  Awaited<ReturnType<typeof deleteRecipeIngredientLink>>,
  TError,
  { recipeId: string; recipeIngredientLinkId: string },
  TContext
> => {
  const mutationOptions = getDeleteRecipeIngredientLinkMutationOptions(options);

  return useMutation(mutationOptions);
};
