/**
 * Generated by orval v6.31.0 🍺
 * Do not edit manually.
 * Nory Inventory API
 * API for managing inventory, staff, locations, recipes, menu items, and related data for Nory.
 * OpenAPI spec version: 1.0.0
 */
import { faker } from '@faker-js/faker';
import { HttpResponse, delay, http } from 'msw';
import type { RecipeIngredientLink } from '../noryInventoryAPI.schemas';

export const getListRecipeIngredientLinksResponseMock =
  (): RecipeIngredientLink[] =>
    Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1
    ).map(() => ({
      id: faker.word.sample(),
      ingredientId: faker.word.sample(),
      quantity: faker.number.int({ min: 0, max: undefined }),
      recipeId: faker.word.sample(),
    }));

export const getCreateRecipeIngredientLinkResponseMock = (
  overrideResponse: Partial<RecipeIngredientLink> = {}
): RecipeIngredientLink => ({
  id: faker.word.sample(),
  ingredientId: faker.word.sample(),
  quantity: faker.number.int({ min: 0, max: undefined }),
  recipeId: faker.word.sample(),
  ...overrideResponse,
});

export const getListRecipeIngredientLinksMockHandler = (
  overrideResponse?:
    | RecipeIngredientLink[]
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0]
      ) => Promise<RecipeIngredientLink[]> | RecipeIngredientLink[])
) => {
  return http.get('*/recipes/:recipeId/ingredientLinks', async (info) => {
    await delay(1000);
    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === 'function'
            ? await overrideResponse(info)
            : overrideResponse
          : getListRecipeIngredientLinksResponseMock()
      ),
      {
        status: 200,
        headers: {
          'Content-Type': 'application/json',
        },
      }
    );
  });
};

export const getCreateRecipeIngredientLinkMockHandler = (
  overrideResponse?:
    | RecipeIngredientLink
    | ((
        info: Parameters<Parameters<typeof http.post>[1]>[0]
      ) => Promise<RecipeIngredientLink> | RecipeIngredientLink)
) => {
  return http.post('*/recipes/:recipeId/ingredientLinks', async (info) => {
    await delay(1000);
    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === 'function'
            ? await overrideResponse(info)
            : overrideResponse
          : getCreateRecipeIngredientLinkResponseMock()
      ),
      {
        status: 201,
        headers: {
          'Content-Type': 'application/json',
        },
      }
    );
  });
};

export const getDeleteRecipeIngredientLinkMockHandler = () => {
  return http.delete(
    '*/recipes/:recipeId/ingredientLinks/:recipeIngredientLinkId',
    async () => {
      await delay(1000);
      return new HttpResponse(null, {
        status: 204,
        headers: {
          'Content-Type': 'application/json',
        },
      });
    }
  );
};
export const getRecipeIngredientLinksMock = () => [
  getListRecipeIngredientLinksMockHandler(),
  getCreateRecipeIngredientLinkMockHandler(),
  getDeleteRecipeIngredientLinkMockHandler(),
];
