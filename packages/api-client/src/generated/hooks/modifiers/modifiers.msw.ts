/**
 * Generated by orval v6.31.0 🍺
 * Do not edit manually.
 * Nory Inventory API
 * API for managing inventory, staff, locations, recipes, menu items, and related data for Nory.
 * OpenAPI spec version: 1.0.0
 */
import { faker } from '@faker-js/faker';
import { HttpResponse, delay, http } from 'msw';
import type { Modifier } from '../noryInventoryAPI.schemas';

export const getListModifiersResponseMock = (): Modifier[] =>
  Array.from(
    { length: faker.number.int({ min: 1, max: 10 }) },
    (_, i) => i + 1
  ).map(() => ({ id: faker.word.sample(), name: faker.word.sample() }));

export const getCreateModifierResponseMock = (
  overrideResponse: Partial<Modifier> = {}
): Modifier => ({
  id: faker.word.sample(),
  name: faker.word.sample(),
  ...overrideResponse,
});

export const getGetModifierByIdResponseMock = (
  overrideResponse: Partial<Modifier> = {}
): Modifier => ({
  id: faker.word.sample(),
  name: faker.word.sample(),
  ...overrideResponse,
});

export const getUpdateModifierResponseMock = (
  overrideResponse: Partial<Modifier> = {}
): Modifier => ({
  id: faker.word.sample(),
  name: faker.word.sample(),
  ...overrideResponse,
});

export const getListModifiersMockHandler = (
  overrideResponse?:
    | Modifier[]
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0]
      ) => Promise<Modifier[]> | Modifier[])
) => {
  return http.get('*/modifiers', async (info) => {
    await delay(1000);
    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === 'function'
            ? await overrideResponse(info)
            : overrideResponse
          : getListModifiersResponseMock()
      ),
      {
        status: 200,
        headers: {
          'Content-Type': 'application/json',
        },
      }
    );
  });
};

export const getCreateModifierMockHandler = (
  overrideResponse?:
    | Modifier
    | ((
        info: Parameters<Parameters<typeof http.post>[1]>[0]
      ) => Promise<Modifier> | Modifier)
) => {
  return http.post('*/modifiers', async (info) => {
    await delay(1000);
    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === 'function'
            ? await overrideResponse(info)
            : overrideResponse
          : getCreateModifierResponseMock()
      ),
      {
        status: 201,
        headers: {
          'Content-Type': 'application/json',
        },
      }
    );
  });
};

export const getGetModifierByIdMockHandler = (
  overrideResponse?:
    | Modifier
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0]
      ) => Promise<Modifier> | Modifier)
) => {
  return http.get('*/modifiers/:modifierId', async (info) => {
    await delay(1000);
    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === 'function'
            ? await overrideResponse(info)
            : overrideResponse
          : getGetModifierByIdResponseMock()
      ),
      {
        status: 200,
        headers: {
          'Content-Type': 'application/json',
        },
      }
    );
  });
};

export const getUpdateModifierMockHandler = (
  overrideResponse?:
    | Modifier
    | ((
        info: Parameters<Parameters<typeof http.patch>[1]>[0]
      ) => Promise<Modifier> | Modifier)
) => {
  return http.patch('*/modifiers/:modifierId', async (info) => {
    await delay(1000);
    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === 'function'
            ? await overrideResponse(info)
            : overrideResponse
          : getUpdateModifierResponseMock()
      ),
      {
        status: 200,
        headers: {
          'Content-Type': 'application/json',
        },
      }
    );
  });
};

export const getDeleteModifierMockHandler = () => {
  return http.delete('*/modifiers/:modifierId', async () => {
    await delay(1000);
    return new HttpResponse(null, {
      status: 204,
      headers: {
        'Content-Type': 'application/json',
      },
    });
  });
};
export const getModifiersMock = () => [
  getListModifiersMockHandler(),
  getCreateModifierMockHandler(),
  getGetModifierByIdMockHandler(),
  getUpdateModifierMockHandler(),
  getDeleteModifierMockHandler(),
];
