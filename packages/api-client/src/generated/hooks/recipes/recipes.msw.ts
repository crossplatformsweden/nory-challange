/**
 * Generated by orval v6.31.0 🍺
 * Do not edit manually.
 * Nory Inventory API
 * API for managing inventory, staff, locations, recipes, menu items, and related data for Nory.
 * OpenAPI spec version: 1.0.0
 */
import { faker } from '@faker-js/faker';
import { HttpResponse, delay, http } from 'msw';
import type { Recipe } from '../noryInventoryAPI.schemas';

export const getListRecipesResponseMock = (): Recipe[] =>
  Array.from(
    { length: faker.number.int({ min: 1, max: 10 }) },
    (_, i) => i + 1
  ).map(() => ({
    description: faker.helpers.arrayElement([
      faker.helpers.arrayElement([faker.word.sample(), null]),
      undefined,
    ]),
    id: faker.word.sample(),
    name: faker.word.sample(),
  }));

export const getCreateRecipeResponseMock = (
  overrideResponse: Partial<Recipe> = {}
): Recipe => ({
  description: faker.helpers.arrayElement([
    faker.helpers.arrayElement([faker.word.sample(), null]),
    undefined,
  ]),
  id: faker.word.sample(),
  name: faker.word.sample(),
  ...overrideResponse,
});

export const getGetRecipeByIdResponseMock = (
  overrideResponse: Partial<Recipe> = {}
): Recipe => ({
  description: faker.helpers.arrayElement([
    faker.helpers.arrayElement([faker.word.sample(), null]),
    undefined,
  ]),
  id: faker.word.sample(),
  name: faker.word.sample(),
  ...overrideResponse,
});

export const getUpdateRecipeResponseMock = (
  overrideResponse: Partial<Recipe> = {}
): Recipe => ({
  description: faker.helpers.arrayElement([
    faker.helpers.arrayElement([faker.word.sample(), null]),
    undefined,
  ]),
  id: faker.word.sample(),
  name: faker.word.sample(),
  ...overrideResponse,
});

export const getListRecipesMockHandler = (
  overrideResponse?:
    | Recipe[]
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0]
      ) => Promise<Recipe[]> | Recipe[])
) => {
  return http.get('*/recipes', async (info) => {
    await delay(1000);
    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === 'function'
            ? await overrideResponse(info)
            : overrideResponse
          : getListRecipesResponseMock()
      ),
      {
        status: 200,
        headers: {
          'Content-Type': 'application/json',
        },
      }
    );
  });
};

export const getCreateRecipeMockHandler = (
  overrideResponse?:
    | Recipe
    | ((
        info: Parameters<Parameters<typeof http.post>[1]>[0]
      ) => Promise<Recipe> | Recipe)
) => {
  return http.post('*/recipes', async (info) => {
    await delay(1000);
    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === 'function'
            ? await overrideResponse(info)
            : overrideResponse
          : getCreateRecipeResponseMock()
      ),
      {
        status: 201,
        headers: {
          'Content-Type': 'application/json',
        },
      }
    );
  });
};

export const getGetRecipeByIdMockHandler = (
  overrideResponse?:
    | Recipe
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0]
      ) => Promise<Recipe> | Recipe)
) => {
  return http.get('*/recipes/:recipeId', async (info) => {
    await delay(1000);
    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === 'function'
            ? await overrideResponse(info)
            : overrideResponse
          : getGetRecipeByIdResponseMock()
      ),
      {
        status: 200,
        headers: {
          'Content-Type': 'application/json',
        },
      }
    );
  });
};

export const getUpdateRecipeMockHandler = (
  overrideResponse?:
    | Recipe
    | ((
        info: Parameters<Parameters<typeof http.patch>[1]>[0]
      ) => Promise<Recipe> | Recipe)
) => {
  return http.patch('*/recipes/:recipeId', async (info) => {
    await delay(1000);
    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === 'function'
            ? await overrideResponse(info)
            : overrideResponse
          : getUpdateRecipeResponseMock()
      ),
      {
        status: 200,
        headers: {
          'Content-Type': 'application/json',
        },
      }
    );
  });
};

export const getDeleteRecipeMockHandler = () => {
  return http.delete('*/recipes/:recipeId', async () => {
    await delay(1000);
    return new HttpResponse(null, {
      status: 204,
      headers: {
        'Content-Type': 'application/json',
      },
    });
  });
};
export const getRecipesMock = () => [
  getListRecipesMockHandler(),
  getCreateRecipeMockHandler(),
  getGetRecipeByIdMockHandler(),
  getUpdateRecipeMockHandler(),
  getDeleteRecipeMockHandler(),
];
