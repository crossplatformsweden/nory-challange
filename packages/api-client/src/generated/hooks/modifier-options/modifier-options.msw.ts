/**
 * Generated by orval v6.31.0 🍺
 * Do not edit manually.
 * Nory Inventory API
 * API for managing inventory, staff, locations, recipes, menu items, and related data for Nory.
 * OpenAPI spec version: 1.0.0
 */
import { faker } from '@faker-js/faker';
import { HttpResponse, delay, http } from 'msw';
import type { ModifierOption } from '../noryInventoryAPI.schemas';

export const getListModifierOptionsResponseMock = (): ModifierOption[] =>
  Array.from(
    { length: faker.number.int({ min: 1, max: 10 }) },
    (_, i) => i + 1
  ).map(() => ({
    id: faker.word.sample(),
    modifierId: faker.word.sample(),
    name: faker.word.sample(),
    price: faker.number.int({ min: 0, max: undefined }),
  }));

export const getCreateModifierOptionResponseMock = (
  overrideResponse: Partial<ModifierOption> = {}
): ModifierOption => ({
  id: faker.word.sample(),
  modifierId: faker.word.sample(),
  name: faker.word.sample(),
  price: faker.number.int({ min: 0, max: undefined }),
  ...overrideResponse,
});

export const getGetModifierOptionByIdResponseMock = (
  overrideResponse: Partial<ModifierOption> = {}
): ModifierOption => ({
  id: faker.word.sample(),
  modifierId: faker.word.sample(),
  name: faker.word.sample(),
  price: faker.number.int({ min: 0, max: undefined }),
  ...overrideResponse,
});

export const getUpdateModifierOptionResponseMock = (
  overrideResponse: Partial<ModifierOption> = {}
): ModifierOption => ({
  id: faker.word.sample(),
  modifierId: faker.word.sample(),
  name: faker.word.sample(),
  price: faker.number.int({ min: 0, max: undefined }),
  ...overrideResponse,
});

export const getListModifierOptionsMockHandler = (
  overrideResponse?:
    | ModifierOption[]
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0]
      ) => Promise<ModifierOption[]> | ModifierOption[])
) => {
  return http.get('*/modifiers/:modifierId/options', async (info) => {
    await delay(1000);
    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === 'function'
            ? await overrideResponse(info)
            : overrideResponse
          : getListModifierOptionsResponseMock()
      ),
      {
        status: 200,
        headers: {
          'Content-Type': 'application/json',
        },
      }
    );
  });
};

export const getCreateModifierOptionMockHandler = (
  overrideResponse?:
    | ModifierOption
    | ((
        info: Parameters<Parameters<typeof http.post>[1]>[0]
      ) => Promise<ModifierOption> | ModifierOption)
) => {
  return http.post('*/modifiers/:modifierId/options', async (info) => {
    await delay(1000);
    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === 'function'
            ? await overrideResponse(info)
            : overrideResponse
          : getCreateModifierOptionResponseMock()
      ),
      {
        status: 201,
        headers: {
          'Content-Type': 'application/json',
        },
      }
    );
  });
};

export const getGetModifierOptionByIdMockHandler = (
  overrideResponse?:
    | ModifierOption
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0]
      ) => Promise<ModifierOption> | ModifierOption)
) => {
  return http.get(
    '*/modifiers/:modifierId/options/:modifierOptionId',
    async (info) => {
      await delay(1000);
      return new HttpResponse(
        JSON.stringify(
          overrideResponse !== undefined
            ? typeof overrideResponse === 'function'
              ? await overrideResponse(info)
              : overrideResponse
            : getGetModifierOptionByIdResponseMock()
        ),
        {
          status: 200,
          headers: {
            'Content-Type': 'application/json',
          },
        }
      );
    }
  );
};

export const getUpdateModifierOptionMockHandler = (
  overrideResponse?:
    | ModifierOption
    | ((
        info: Parameters<Parameters<typeof http.patch>[1]>[0]
      ) => Promise<ModifierOption> | ModifierOption)
) => {
  return http.patch(
    '*/modifiers/:modifierId/options/:modifierOptionId',
    async (info) => {
      await delay(1000);
      return new HttpResponse(
        JSON.stringify(
          overrideResponse !== undefined
            ? typeof overrideResponse === 'function'
              ? await overrideResponse(info)
              : overrideResponse
            : getUpdateModifierOptionResponseMock()
        ),
        {
          status: 200,
          headers: {
            'Content-Type': 'application/json',
          },
        }
      );
    }
  );
};

export const getDeleteModifierOptionMockHandler = () => {
  return http.delete(
    '*/modifiers/:modifierId/options/:modifierOptionId',
    async () => {
      await delay(1000);
      return new HttpResponse(null, {
        status: 204,
        headers: {
          'Content-Type': 'application/json',
        },
      });
    }
  );
};
export const getModifierOptionsMock = () => [
  getListModifierOptionsMockHandler(),
  getCreateModifierOptionMockHandler(),
  getGetModifierOptionByIdMockHandler(),
  getUpdateModifierOptionMockHandler(),
  getDeleteModifierOptionMockHandler(),
];
