/**
 * Generated by orval v6.31.0 üç∫
 * Do not edit manually.
 * Nory Inventory API
 * API for managing inventory, staff, locations, recipes, menu items, and related data for Nory.
 * OpenAPI spec version: 1.0.0
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query'
import type {
  MutationFunction,
  QueryFunction,
  QueryKey,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query'
import axios from 'axios'
import type {
  AxiosError,
  AxiosRequestConfig,
  AxiosResponse
} from 'axios'
import type {
  BadRequestResponse,
  InternalServerErrorResponse,
  ModifierOption,
  ModifierOptionCreate,
  ModifierOptionUpdate,
  NotFoundResponse
} from '../noryInventoryAPI.schemas'



/**
 * Retrieve a list of all individual options within the specified modifier group.
 * @summary List options for a modifier group
 */
export const listModifierOptions = (
    modifierId: string, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<ModifierOption[]>> => {
    
    return axios.get(
      `/modifiers/${modifierId}/options`,options
    );
  }


export const getListModifierOptionsQueryKey = (modifierId: string,) => {
    return [`/modifiers/${modifierId}/options`] as const;
    }

    
export const getListModifierOptionsQueryOptions = <TData = Awaited<ReturnType<typeof listModifierOptions>>, TError = AxiosError<NotFoundResponse | InternalServerErrorResponse>>(modifierId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof listModifierOptions>>, TError, TData>>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getListModifierOptionsQueryKey(modifierId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof listModifierOptions>>> = ({ signal }) => listModifierOptions(modifierId, { signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, enabled: !!(modifierId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof listModifierOptions>>, TError, TData> & { queryKey: QueryKey }
}

export type ListModifierOptionsQueryResult = NonNullable<Awaited<ReturnType<typeof listModifierOptions>>>
export type ListModifierOptionsQueryError = AxiosError<NotFoundResponse | InternalServerErrorResponse>

/**
 * @summary List options for a modifier group
 */
export const useListModifierOptions = <TData = Awaited<ReturnType<typeof listModifierOptions>>, TError = AxiosError<NotFoundResponse | InternalServerErrorResponse>>(
 modifierId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof listModifierOptions>>, TError, TData>>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getListModifierOptionsQueryOptions(modifierId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * Add a new individual option to an existing modifier group.
 * @summary Create a new modifier option for a group
 */
export const createModifierOption = (
    modifierId: string,
    modifierOptionCreate: ModifierOptionCreate, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<ModifierOption>> => {
    
    return axios.post(
      `/modifiers/${modifierId}/options`,
      modifierOptionCreate,options
    );
  }



export const getCreateModifierOptionMutationOptions = <TError = AxiosError<BadRequestResponse | NotFoundResponse | InternalServerErrorResponse>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createModifierOption>>, TError,{modifierId: string;data: ModifierOptionCreate}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof createModifierOption>>, TError,{modifierId: string;data: ModifierOptionCreate}, TContext> => {
const {mutation: mutationOptions, axios: axiosOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof createModifierOption>>, {modifierId: string;data: ModifierOptionCreate}> = (props) => {
          const {modifierId,data} = props ?? {};

          return  createModifierOption(modifierId,data,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type CreateModifierOptionMutationResult = NonNullable<Awaited<ReturnType<typeof createModifierOption>>>
    export type CreateModifierOptionMutationBody = ModifierOptionCreate
    export type CreateModifierOptionMutationError = AxiosError<BadRequestResponse | NotFoundResponse | InternalServerErrorResponse>

    /**
 * @summary Create a new modifier option for a group
 */
export const useCreateModifierOption = <TError = AxiosError<BadRequestResponse | NotFoundResponse | InternalServerErrorResponse>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createModifierOption>>, TError,{modifierId: string;data: ModifierOptionCreate}, TContext>, axios?: AxiosRequestConfig}
): UseMutationResult<
        Awaited<ReturnType<typeof createModifierOption>>,
        TError,
        {modifierId: string;data: ModifierOptionCreate},
        TContext
      > => {

      const mutationOptions = getCreateModifierOptionMutationOptions(options);

      return useMutation(mutationOptions);
    }
    /**
 * Retrieve a specific modifier option using its unique ID within the context of a modifier group.
 * @summary Get a modifier option by ID for a group
 */
export const getModifierOptionById = (
    modifierId: string,
    modifierOptionId: string, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<ModifierOption>> => {
    
    return axios.get(
      `/modifiers/${modifierId}/options/${modifierOptionId}`,options
    );
  }


export const getGetModifierOptionByIdQueryKey = (modifierId: string,
    modifierOptionId: string,) => {
    return [`/modifiers/${modifierId}/options/${modifierOptionId}`] as const;
    }

    
export const getGetModifierOptionByIdQueryOptions = <TData = Awaited<ReturnType<typeof getModifierOptionById>>, TError = AxiosError<NotFoundResponse | InternalServerErrorResponse>>(modifierId: string,
    modifierOptionId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getModifierOptionById>>, TError, TData>>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetModifierOptionByIdQueryKey(modifierId,modifierOptionId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getModifierOptionById>>> = ({ signal }) => getModifierOptionById(modifierId,modifierOptionId, { signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, enabled: !!(modifierId && modifierOptionId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getModifierOptionById>>, TError, TData> & { queryKey: QueryKey }
}

export type GetModifierOptionByIdQueryResult = NonNullable<Awaited<ReturnType<typeof getModifierOptionById>>>
export type GetModifierOptionByIdQueryError = AxiosError<NotFoundResponse | InternalServerErrorResponse>

/**
 * @summary Get a modifier option by ID for a group
 */
export const useGetModifierOptionById = <TData = Awaited<ReturnType<typeof getModifierOptionById>>, TError = AxiosError<NotFoundResponse | InternalServerErrorResponse>>(
 modifierId: string,
    modifierOptionId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getModifierOptionById>>, TError, TData>>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetModifierOptionByIdQueryOptions(modifierId,modifierOptionId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * Update details of an existing modifier option within the specified modifier group.
 * @summary Update a modifier option for a group
 */
export const updateModifierOption = (
    modifierId: string,
    modifierOptionId: string,
    modifierOptionUpdate: ModifierOptionUpdate, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<ModifierOption>> => {
    
    return axios.patch(
      `/modifiers/${modifierId}/options/${modifierOptionId}`,
      modifierOptionUpdate,options
    );
  }



export const getUpdateModifierOptionMutationOptions = <TError = AxiosError<BadRequestResponse | NotFoundResponse | InternalServerErrorResponse>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateModifierOption>>, TError,{modifierId: string;modifierOptionId: string;data: ModifierOptionUpdate}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof updateModifierOption>>, TError,{modifierId: string;modifierOptionId: string;data: ModifierOptionUpdate}, TContext> => {
const {mutation: mutationOptions, axios: axiosOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof updateModifierOption>>, {modifierId: string;modifierOptionId: string;data: ModifierOptionUpdate}> = (props) => {
          const {modifierId,modifierOptionId,data} = props ?? {};

          return  updateModifierOption(modifierId,modifierOptionId,data,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type UpdateModifierOptionMutationResult = NonNullable<Awaited<ReturnType<typeof updateModifierOption>>>
    export type UpdateModifierOptionMutationBody = ModifierOptionUpdate
    export type UpdateModifierOptionMutationError = AxiosError<BadRequestResponse | NotFoundResponse | InternalServerErrorResponse>

    /**
 * @summary Update a modifier option for a group
 */
export const useUpdateModifierOption = <TError = AxiosError<BadRequestResponse | NotFoundResponse | InternalServerErrorResponse>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateModifierOption>>, TError,{modifierId: string;modifierOptionId: string;data: ModifierOptionUpdate}, TContext>, axios?: AxiosRequestConfig}
): UseMutationResult<
        Awaited<ReturnType<typeof updateModifierOption>>,
        TError,
        {modifierId: string;modifierOptionId: string;data: ModifierOptionUpdate},
        TContext
      > => {

      const mutationOptions = getUpdateModifierOptionMutationOptions(options);

      return useMutation(mutationOptions);
    }
    /**
 * Remove a specific modifier option from the specified modifier group.
 * @summary Delete a modifier option from a group
 */
export const deleteModifierOption = (
    modifierId: string,
    modifierOptionId: string, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<void>> => {
    
    return axios.delete(
      `/modifiers/${modifierId}/options/${modifierOptionId}`,options
    );
  }



export const getDeleteModifierOptionMutationOptions = <TError = AxiosError<NotFoundResponse | InternalServerErrorResponse>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteModifierOption>>, TError,{modifierId: string;modifierOptionId: string}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof deleteModifierOption>>, TError,{modifierId: string;modifierOptionId: string}, TContext> => {
const {mutation: mutationOptions, axios: axiosOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteModifierOption>>, {modifierId: string;modifierOptionId: string}> = (props) => {
          const {modifierId,modifierOptionId} = props ?? {};

          return  deleteModifierOption(modifierId,modifierOptionId,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteModifierOptionMutationResult = NonNullable<Awaited<ReturnType<typeof deleteModifierOption>>>
    
    export type DeleteModifierOptionMutationError = AxiosError<NotFoundResponse | InternalServerErrorResponse>

    /**
 * @summary Delete a modifier option from a group
 */
export const useDeleteModifierOption = <TError = AxiosError<NotFoundResponse | InternalServerErrorResponse>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteModifierOption>>, TError,{modifierId: string;modifierOptionId: string}, TContext>, axios?: AxiosRequestConfig}
): UseMutationResult<
        Awaited<ReturnType<typeof deleteModifierOption>>,
        TError,
        {modifierId: string;modifierOptionId: string},
        TContext
      > => {

      const mutationOptions = getDeleteModifierOptionMutationOptions(options);

      return useMutation(mutationOptions);
    }
    