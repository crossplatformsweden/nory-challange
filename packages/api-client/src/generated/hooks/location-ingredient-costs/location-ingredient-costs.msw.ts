/**
 * Generated by orval v6.31.0 🍺
 * Do not edit manually.
 * Nory Inventory API
 * API for managing inventory, staff, locations, recipes, menu items, and related data for Nory.
 * OpenAPI spec version: 1.0.0
 */
import { faker } from '@faker-js/faker';
import { HttpResponse, delay, http } from 'msw';
import type { LocationIngredientCost } from '../noryInventoryAPI.schemas';

export const getListLocationIngredientCostsResponseMock =
  (): LocationIngredientCost[] =>
    Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1
    ).map(() => ({
      costPerUnit: faker.number.int({ min: 0, max: undefined }),
      id: faker.word.sample(),
      ingredientId: faker.word.sample(),
      locationId: faker.word.sample(),
      updatedAt: faker.helpers.arrayElement([
        `${faker.date.past().toISOString().split('.')[0]}Z`,
        undefined,
      ]),
    }));

export const getCreateLocationIngredientCostResponseMock = (
  overrideResponse: Partial<LocationIngredientCost> = {}
): LocationIngredientCost => ({
  costPerUnit: faker.number.int({ min: 0, max: undefined }),
  id: faker.word.sample(),
  ingredientId: faker.word.sample(),
  locationId: faker.word.sample(),
  updatedAt: faker.helpers.arrayElement([
    `${faker.date.past().toISOString().split('.')[0]}Z`,
    undefined,
  ]),
  ...overrideResponse,
});

export const getGetLocationIngredientCostByIdResponseMock = (
  overrideResponse: Partial<LocationIngredientCost> = {}
): LocationIngredientCost => ({
  costPerUnit: faker.number.int({ min: 0, max: undefined }),
  id: faker.word.sample(),
  ingredientId: faker.word.sample(),
  locationId: faker.word.sample(),
  updatedAt: faker.helpers.arrayElement([
    `${faker.date.past().toISOString().split('.')[0]}Z`,
    undefined,
  ]),
  ...overrideResponse,
});

export const getUpdateLocationIngredientCostResponseMock = (
  overrideResponse: Partial<LocationIngredientCost> = {}
): LocationIngredientCost => ({
  costPerUnit: faker.number.int({ min: 0, max: undefined }),
  id: faker.word.sample(),
  ingredientId: faker.word.sample(),
  locationId: faker.word.sample(),
  updatedAt: faker.helpers.arrayElement([
    `${faker.date.past().toISOString().split('.')[0]}Z`,
    undefined,
  ]),
  ...overrideResponse,
});

export const getListLocationIngredientCostsMockHandler = (
  overrideResponse?:
    | LocationIngredientCost[]
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0]
      ) => Promise<LocationIngredientCost[]> | LocationIngredientCost[])
) => {
  return http.get('*/locations/:locationId/ingredientCosts', async (info) => {
    await delay(1000);
    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === 'function'
            ? await overrideResponse(info)
            : overrideResponse
          : getListLocationIngredientCostsResponseMock()
      ),
      {
        status: 200,
        headers: {
          'Content-Type': 'application/json',
        },
      }
    );
  });
};

export const getCreateLocationIngredientCostMockHandler = (
  overrideResponse?:
    | LocationIngredientCost
    | ((
        info: Parameters<Parameters<typeof http.post>[1]>[0]
      ) => Promise<LocationIngredientCost> | LocationIngredientCost)
) => {
  return http.post('*/locations/:locationId/ingredientCosts', async (info) => {
    await delay(1000);
    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === 'function'
            ? await overrideResponse(info)
            : overrideResponse
          : getCreateLocationIngredientCostResponseMock()
      ),
      {
        status: 201,
        headers: {
          'Content-Type': 'application/json',
        },
      }
    );
  });
};

export const getGetLocationIngredientCostByIdMockHandler = (
  overrideResponse?:
    | LocationIngredientCost
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0]
      ) => Promise<LocationIngredientCost> | LocationIngredientCost)
) => {
  return http.get(
    '*/locations/:locationId/ingredientCosts/:locationIngredientCostId',
    async (info) => {
      await delay(1000);
      return new HttpResponse(
        JSON.stringify(
          overrideResponse !== undefined
            ? typeof overrideResponse === 'function'
              ? await overrideResponse(info)
              : overrideResponse
            : getGetLocationIngredientCostByIdResponseMock()
        ),
        {
          status: 200,
          headers: {
            'Content-Type': 'application/json',
          },
        }
      );
    }
  );
};

export const getUpdateLocationIngredientCostMockHandler = (
  overrideResponse?:
    | LocationIngredientCost
    | ((
        info: Parameters<Parameters<typeof http.patch>[1]>[0]
      ) => Promise<LocationIngredientCost> | LocationIngredientCost)
) => {
  return http.patch(
    '*/locations/:locationId/ingredientCosts/:locationIngredientCostId',
    async (info) => {
      await delay(1000);
      return new HttpResponse(
        JSON.stringify(
          overrideResponse !== undefined
            ? typeof overrideResponse === 'function'
              ? await overrideResponse(info)
              : overrideResponse
            : getUpdateLocationIngredientCostResponseMock()
        ),
        {
          status: 200,
          headers: {
            'Content-Type': 'application/json',
          },
        }
      );
    }
  );
};

export const getDeleteLocationIngredientCostMockHandler = () => {
  return http.delete(
    '*/locations/:locationId/ingredientCosts/:locationIngredientCostId',
    async () => {
      await delay(1000);
      return new HttpResponse(null, {
        status: 204,
        headers: {
          'Content-Type': 'application/json',
        },
      });
    }
  );
};
export const getLocationIngredientCostsMock = () => [
  getListLocationIngredientCostsMockHandler(),
  getCreateLocationIngredientCostMockHandler(),
  getGetLocationIngredientCostByIdMockHandler(),
  getUpdateLocationIngredientCostMockHandler(),
  getDeleteLocationIngredientCostMockHandler(),
];
