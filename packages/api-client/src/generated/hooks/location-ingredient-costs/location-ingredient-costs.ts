/**
 * Generated by orval v6.31.0 üç∫
 * Do not edit manually.
 * Nory Inventory API
 * API for managing inventory, staff, locations, recipes, menu items, and related data for Nory.
 * OpenAPI spec version: 1.0.0
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query'
import type {
  MutationFunction,
  QueryFunction,
  QueryKey,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query'
import axios from 'axios'
import type {
  AxiosError,
  AxiosRequestConfig,
  AxiosResponse
} from 'axios'
import type {
  BadRequestResponse,
  ConflictResponse,
  InternalServerErrorResponse,
  LocationIngredientCost,
  LocationIngredientCostCreate,
  LocationIngredientCostUpdate,
  NotFoundResponse
} from '../noryInventoryAPI.schemas'



/**
 * Retrieve a list of location-specific costs for ingredients.
 * @summary List ingredient costs for a specific location
 */
export const listLocationIngredientCosts = (
    locationId: string, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<LocationIngredientCost[]>> => {
    
    return axios.get(
      `/locations/${locationId}/ingredientCosts`,options
    );
  }


export const getListLocationIngredientCostsQueryKey = (locationId: string,) => {
    return [`/locations/${locationId}/ingredientCosts`] as const;
    }

    
export const getListLocationIngredientCostsQueryOptions = <TData = Awaited<ReturnType<typeof listLocationIngredientCosts>>, TError = AxiosError<NotFoundResponse | InternalServerErrorResponse>>(locationId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof listLocationIngredientCosts>>, TError, TData>>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getListLocationIngredientCostsQueryKey(locationId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof listLocationIngredientCosts>>> = ({ signal }) => listLocationIngredientCosts(locationId, { signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, enabled: !!(locationId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof listLocationIngredientCosts>>, TError, TData> & { queryKey: QueryKey }
}

export type ListLocationIngredientCostsQueryResult = NonNullable<Awaited<ReturnType<typeof listLocationIngredientCosts>>>
export type ListLocationIngredientCostsQueryError = AxiosError<NotFoundResponse | InternalServerErrorResponse>

/**
 * @summary List ingredient costs for a specific location
 */
export const useListLocationIngredientCosts = <TData = Awaited<ReturnType<typeof listLocationIngredientCosts>>, TError = AxiosError<NotFoundResponse | InternalServerErrorResponse>>(
 locationId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof listLocationIngredientCosts>>, TError, TData>>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getListLocationIngredientCostsQueryOptions(locationId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * Define the cost of an ingredient specifically for a location.
 * @summary Create a location-specific ingredient cost record
 */
export const createLocationIngredientCost = (
    locationId: string,
    locationIngredientCostCreate: LocationIngredientCostCreate, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<LocationIngredientCost>> => {
    
    return axios.post(
      `/locations/${locationId}/ingredientCosts`,
      locationIngredientCostCreate,options
    );
  }



export const getCreateLocationIngredientCostMutationOptions = <TError = AxiosError<BadRequestResponse | NotFoundResponse | ConflictResponse | InternalServerErrorResponse>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createLocationIngredientCost>>, TError,{locationId: string;data: LocationIngredientCostCreate}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof createLocationIngredientCost>>, TError,{locationId: string;data: LocationIngredientCostCreate}, TContext> => {
const {mutation: mutationOptions, axios: axiosOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof createLocationIngredientCost>>, {locationId: string;data: LocationIngredientCostCreate}> = (props) => {
          const {locationId,data} = props ?? {};

          return  createLocationIngredientCost(locationId,data,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type CreateLocationIngredientCostMutationResult = NonNullable<Awaited<ReturnType<typeof createLocationIngredientCost>>>
    export type CreateLocationIngredientCostMutationBody = LocationIngredientCostCreate
    export type CreateLocationIngredientCostMutationError = AxiosError<BadRequestResponse | NotFoundResponse | ConflictResponse | InternalServerErrorResponse>

    /**
 * @summary Create a location-specific ingredient cost record
 */
export const useCreateLocationIngredientCost = <TError = AxiosError<BadRequestResponse | NotFoundResponse | ConflictResponse | InternalServerErrorResponse>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createLocationIngredientCost>>, TError,{locationId: string;data: LocationIngredientCostCreate}, TContext>, axios?: AxiosRequestConfig}
): UseMutationResult<
        Awaited<ReturnType<typeof createLocationIngredientCost>>,
        TError,
        {locationId: string;data: LocationIngredientCostCreate},
        TContext
      > => {

      const mutationOptions = getCreateLocationIngredientCostMutationOptions(options);

      return useMutation(mutationOptions);
    }
    /**
 * Retrieve a specific ingredient cost record for a location using its unique ID.
 * @summary Get a location-specific ingredient cost by ID
 */
export const getLocationIngredientCostById = (
    locationId: string,
    locationIngredientCostId: string, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<LocationIngredientCost>> => {
    
    return axios.get(
      `/locations/${locationId}/ingredientCosts/${locationIngredientCostId}`,options
    );
  }


export const getGetLocationIngredientCostByIdQueryKey = (locationId: string,
    locationIngredientCostId: string,) => {
    return [`/locations/${locationId}/ingredientCosts/${locationIngredientCostId}`] as const;
    }

    
export const getGetLocationIngredientCostByIdQueryOptions = <TData = Awaited<ReturnType<typeof getLocationIngredientCostById>>, TError = AxiosError<NotFoundResponse | InternalServerErrorResponse>>(locationId: string,
    locationIngredientCostId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getLocationIngredientCostById>>, TError, TData>>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetLocationIngredientCostByIdQueryKey(locationId,locationIngredientCostId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getLocationIngredientCostById>>> = ({ signal }) => getLocationIngredientCostById(locationId,locationIngredientCostId, { signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, enabled: !!(locationId && locationIngredientCostId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getLocationIngredientCostById>>, TError, TData> & { queryKey: QueryKey }
}

export type GetLocationIngredientCostByIdQueryResult = NonNullable<Awaited<ReturnType<typeof getLocationIngredientCostById>>>
export type GetLocationIngredientCostByIdQueryError = AxiosError<NotFoundResponse | InternalServerErrorResponse>

/**
 * @summary Get a location-specific ingredient cost by ID
 */
export const useGetLocationIngredientCostById = <TData = Awaited<ReturnType<typeof getLocationIngredientCostById>>, TError = AxiosError<NotFoundResponse | InternalServerErrorResponse>>(
 locationId: string,
    locationIngredientCostId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getLocationIngredientCostById>>, TError, TData>>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetLocationIngredientCostByIdQueryOptions(locationId,locationIngredientCostId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * Update the cost value for an existing ingredient cost record at a location.
 * @summary Update a location-specific ingredient cost
 */
export const updateLocationIngredientCost = (
    locationId: string,
    locationIngredientCostId: string,
    locationIngredientCostUpdate: LocationIngredientCostUpdate, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<LocationIngredientCost>> => {
    
    return axios.patch(
      `/locations/${locationId}/ingredientCosts/${locationIngredientCostId}`,
      locationIngredientCostUpdate,options
    );
  }



export const getUpdateLocationIngredientCostMutationOptions = <TError = AxiosError<BadRequestResponse | NotFoundResponse | InternalServerErrorResponse>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateLocationIngredientCost>>, TError,{locationId: string;locationIngredientCostId: string;data: LocationIngredientCostUpdate}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof updateLocationIngredientCost>>, TError,{locationId: string;locationIngredientCostId: string;data: LocationIngredientCostUpdate}, TContext> => {
const {mutation: mutationOptions, axios: axiosOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof updateLocationIngredientCost>>, {locationId: string;locationIngredientCostId: string;data: LocationIngredientCostUpdate}> = (props) => {
          const {locationId,locationIngredientCostId,data} = props ?? {};

          return  updateLocationIngredientCost(locationId,locationIngredientCostId,data,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type UpdateLocationIngredientCostMutationResult = NonNullable<Awaited<ReturnType<typeof updateLocationIngredientCost>>>
    export type UpdateLocationIngredientCostMutationBody = LocationIngredientCostUpdate
    export type UpdateLocationIngredientCostMutationError = AxiosError<BadRequestResponse | NotFoundResponse | InternalServerErrorResponse>

    /**
 * @summary Update a location-specific ingredient cost
 */
export const useUpdateLocationIngredientCost = <TError = AxiosError<BadRequestResponse | NotFoundResponse | InternalServerErrorResponse>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateLocationIngredientCost>>, TError,{locationId: string;locationIngredientCostId: string;data: LocationIngredientCostUpdate}, TContext>, axios?: AxiosRequestConfig}
): UseMutationResult<
        Awaited<ReturnType<typeof updateLocationIngredientCost>>,
        TError,
        {locationId: string;locationIngredientCostId: string;data: LocationIngredientCostUpdate},
        TContext
      > => {

      const mutationOptions = getUpdateLocationIngredientCostMutationOptions(options);

      return useMutation(mutationOptions);
    }
    /**
 * Remove a specific ingredient cost record for a location.
 * @summary Delete a location-specific ingredient cost record
 */
export const deleteLocationIngredientCost = (
    locationId: string,
    locationIngredientCostId: string, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<void>> => {
    
    return axios.delete(
      `/locations/${locationId}/ingredientCosts/${locationIngredientCostId}`,options
    );
  }



export const getDeleteLocationIngredientCostMutationOptions = <TError = AxiosError<NotFoundResponse | InternalServerErrorResponse>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteLocationIngredientCost>>, TError,{locationId: string;locationIngredientCostId: string}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof deleteLocationIngredientCost>>, TError,{locationId: string;locationIngredientCostId: string}, TContext> => {
const {mutation: mutationOptions, axios: axiosOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteLocationIngredientCost>>, {locationId: string;locationIngredientCostId: string}> = (props) => {
          const {locationId,locationIngredientCostId} = props ?? {};

          return  deleteLocationIngredientCost(locationId,locationIngredientCostId,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteLocationIngredientCostMutationResult = NonNullable<Awaited<ReturnType<typeof deleteLocationIngredientCost>>>
    
    export type DeleteLocationIngredientCostMutationError = AxiosError<NotFoundResponse | InternalServerErrorResponse>

    /**
 * @summary Delete a location-specific ingredient cost record
 */
export const useDeleteLocationIngredientCost = <TError = AxiosError<NotFoundResponse | InternalServerErrorResponse>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteLocationIngredientCost>>, TError,{locationId: string;locationIngredientCostId: string}, TContext>, axios?: AxiosRequestConfig}
): UseMutationResult<
        Awaited<ReturnType<typeof deleteLocationIngredientCost>>,
        TError,
        {locationId: string;locationIngredientCostId: string},
        TContext
      > => {

      const mutationOptions = getDeleteLocationIngredientCostMutationOptions(options);

      return useMutation(mutationOptions);
    }
    