/**
 * Generated by orval v6.31.0 üç∫
 * Do not edit manually.
 * Nory Inventory API
 * API for managing inventory, staff, locations, recipes, menu items, and related data for Nory.
 * OpenAPI spec version: 1.0.0
 */
import { useMutation, useQuery } from '@tanstack/react-query';
import type {
  MutationFunction,
  QueryFunction,
  QueryKey,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from '@tanstack/react-query';
import axios from 'axios';
import type { AxiosError, AxiosRequestConfig, AxiosResponse } from 'axios';
import type {
  BadRequestResponse,
  InternalServerErrorResponse,
  NotFoundResponse,
  Staff,
  StaffCreate,
  StaffUpdate,
} from '../noryInventoryAPI.schemas';

/**
 * Retrieve a list of all staff members working at the specified location.
 * @summary List staff for a specific location
 */
export const listStaffByLocation = (
  locationId: string,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<Staff[]>> => {
  return axios.get(`/locations/${locationId}/staff`, options);
};

export const getListStaffByLocationQueryKey = (locationId: string) => {
  return [`/locations/${locationId}/staff`] as const;
};

export const getListStaffByLocationQueryOptions = <
  TData = Awaited<ReturnType<typeof listStaffByLocation>>,
  TError = AxiosError<NotFoundResponse | InternalServerErrorResponse>,
>(
  locationId: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof listStaffByLocation>>,
        TError,
        TData
      >
    >;
    axios?: AxiosRequestConfig;
  }
) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getListStaffByLocationQueryKey(locationId);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof listStaffByLocation>>
  > = ({ signal }) =>
    listStaffByLocation(locationId, { signal, ...axiosOptions });

  return {
    queryKey,
    queryFn,
    enabled: !!locationId,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof listStaffByLocation>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type ListStaffByLocationQueryResult = NonNullable<
  Awaited<ReturnType<typeof listStaffByLocation>>
>;
export type ListStaffByLocationQueryError = AxiosError<
  NotFoundResponse | InternalServerErrorResponse
>;

/**
 * @summary List staff for a specific location
 */
export const useListStaffByLocation = <
  TData = Awaited<ReturnType<typeof listStaffByLocation>>,
  TError = AxiosError<NotFoundResponse | InternalServerErrorResponse>,
>(
  locationId: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof listStaffByLocation>>,
        TError,
        TData
      >
    >;
    axios?: AxiosRequestConfig;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getListStaffByLocationQueryOptions(locationId, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * Add a new staff member associated with the specified location.
 * @summary Create a new staff member for a location
 */
export const createStaffAtLocation = (
  locationId: string,
  staffCreate: StaffCreate,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<Staff>> => {
  return axios.post(`/locations/${locationId}/staff`, staffCreate, options);
};

export const getCreateStaffAtLocationMutationOptions = <
  TError = AxiosError<
    BadRequestResponse | NotFoundResponse | InternalServerErrorResponse
  >,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof createStaffAtLocation>>,
    TError,
    { locationId: string; data: StaffCreate },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof createStaffAtLocation>>,
  TError,
  { locationId: string; data: StaffCreate },
  TContext
> => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof createStaffAtLocation>>,
    { locationId: string; data: StaffCreate }
  > = (props) => {
    const { locationId, data } = props ?? {};

    return createStaffAtLocation(locationId, data, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type CreateStaffAtLocationMutationResult = NonNullable<
  Awaited<ReturnType<typeof createStaffAtLocation>>
>;
export type CreateStaffAtLocationMutationBody = StaffCreate;
export type CreateStaffAtLocationMutationError = AxiosError<
  BadRequestResponse | NotFoundResponse | InternalServerErrorResponse
>;

/**
 * @summary Create a new staff member for a location
 */
export const useCreateStaffAtLocation = <
  TError = AxiosError<
    BadRequestResponse | NotFoundResponse | InternalServerErrorResponse
  >,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof createStaffAtLocation>>,
    TError,
    { locationId: string; data: StaffCreate },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationResult<
  Awaited<ReturnType<typeof createStaffAtLocation>>,
  TError,
  { locationId: string; data: StaffCreate },
  TContext
> => {
  const mutationOptions = getCreateStaffAtLocationMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * Retrieve a specific staff member using their unique ID within the context of a location.
 * @summary Get a staff member by ID for a specific location
 */
export const getStaffByLocationAndId = (
  locationId: string,
  staffId: string,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<Staff>> => {
  return axios.get(`/locations/${locationId}/staff/${staffId}`, options);
};

export const getGetStaffByLocationAndIdQueryKey = (
  locationId: string,
  staffId: string
) => {
  return [`/locations/${locationId}/staff/${staffId}`] as const;
};

export const getGetStaffByLocationAndIdQueryOptions = <
  TData = Awaited<ReturnType<typeof getStaffByLocationAndId>>,
  TError = AxiosError<NotFoundResponse | InternalServerErrorResponse>,
>(
  locationId: string,
  staffId: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getStaffByLocationAndId>>,
        TError,
        TData
      >
    >;
    axios?: AxiosRequestConfig;
  }
) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ??
    getGetStaffByLocationAndIdQueryKey(locationId, staffId);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getStaffByLocationAndId>>
  > = ({ signal }) =>
    getStaffByLocationAndId(locationId, staffId, { signal, ...axiosOptions });

  return {
    queryKey,
    queryFn,
    enabled: !!(locationId && staffId),
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getStaffByLocationAndId>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetStaffByLocationAndIdQueryResult = NonNullable<
  Awaited<ReturnType<typeof getStaffByLocationAndId>>
>;
export type GetStaffByLocationAndIdQueryError = AxiosError<
  NotFoundResponse | InternalServerErrorResponse
>;

/**
 * @summary Get a staff member by ID for a specific location
 */
export const useGetStaffByLocationAndId = <
  TData = Awaited<ReturnType<typeof getStaffByLocationAndId>>,
  TError = AxiosError<NotFoundResponse | InternalServerErrorResponse>,
>(
  locationId: string,
  staffId: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getStaffByLocationAndId>>,
        TError,
        TData
      >
    >;
    axios?: AxiosRequestConfig;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetStaffByLocationAndIdQueryOptions(
    locationId,
    staffId,
    options
  );

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * Update details of an existing staff member associated with the specified location.
 * @summary Update a staff member for a location
 */
export const updateStaffAtLocation = (
  locationId: string,
  staffId: string,
  staffUpdate: StaffUpdate,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<Staff>> => {
  return axios.patch(
    `/locations/${locationId}/staff/${staffId}`,
    staffUpdate,
    options
  );
};

export const getUpdateStaffAtLocationMutationOptions = <
  TError = AxiosError<
    BadRequestResponse | NotFoundResponse | InternalServerErrorResponse
  >,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof updateStaffAtLocation>>,
    TError,
    { locationId: string; staffId: string; data: StaffUpdate },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof updateStaffAtLocation>>,
  TError,
  { locationId: string; staffId: string; data: StaffUpdate },
  TContext
> => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof updateStaffAtLocation>>,
    { locationId: string; staffId: string; data: StaffUpdate }
  > = (props) => {
    const { locationId, staffId, data } = props ?? {};

    return updateStaffAtLocation(locationId, staffId, data, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type UpdateStaffAtLocationMutationResult = NonNullable<
  Awaited<ReturnType<typeof updateStaffAtLocation>>
>;
export type UpdateStaffAtLocationMutationBody = StaffUpdate;
export type UpdateStaffAtLocationMutationError = AxiosError<
  BadRequestResponse | NotFoundResponse | InternalServerErrorResponse
>;

/**
 * @summary Update a staff member for a location
 */
export const useUpdateStaffAtLocation = <
  TError = AxiosError<
    BadRequestResponse | NotFoundResponse | InternalServerErrorResponse
  >,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof updateStaffAtLocation>>,
    TError,
    { locationId: string; staffId: string; data: StaffUpdate },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationResult<
  Awaited<ReturnType<typeof updateStaffAtLocation>>,
  TError,
  { locationId: string; staffId: string; data: StaffUpdate },
  TContext
> => {
  const mutationOptions = getUpdateStaffAtLocationMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * Remove a staff member association with the specified location.
 * @summary Delete a staff member from a location
 */
export const deleteStaffAtLocation = (
  locationId: string,
  staffId: string,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<void>> => {
  return axios.delete(`/locations/${locationId}/staff/${staffId}`, options);
};

export const getDeleteStaffAtLocationMutationOptions = <
  TError = AxiosError<NotFoundResponse | InternalServerErrorResponse>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteStaffAtLocation>>,
    TError,
    { locationId: string; staffId: string },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteStaffAtLocation>>,
  TError,
  { locationId: string; staffId: string },
  TContext
> => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteStaffAtLocation>>,
    { locationId: string; staffId: string }
  > = (props) => {
    const { locationId, staffId } = props ?? {};

    return deleteStaffAtLocation(locationId, staffId, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type DeleteStaffAtLocationMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteStaffAtLocation>>
>;

export type DeleteStaffAtLocationMutationError = AxiosError<
  NotFoundResponse | InternalServerErrorResponse
>;

/**
 * @summary Delete a staff member from a location
 */
export const useDeleteStaffAtLocation = <
  TError = AxiosError<NotFoundResponse | InternalServerErrorResponse>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteStaffAtLocation>>,
    TError,
    { locationId: string; staffId: string },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationResult<
  Awaited<ReturnType<typeof deleteStaffAtLocation>>,
  TError,
  { locationId: string; staffId: string },
  TContext
> => {
  const mutationOptions = getDeleteStaffAtLocationMutationOptions(options);

  return useMutation(mutationOptions);
};
