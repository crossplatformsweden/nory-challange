/**
 * Generated by orval v6.31.0 🍺
 * Do not edit manually.
 * Nory Inventory API
 * API for managing inventory, staff, locations, recipes, menu items, and related data for Nory.
 * OpenAPI spec version: 1.0.0
 */
import { faker } from '@faker-js/faker';
import { HttpResponse, delay, http } from 'msw';
import type { LocationMenuItem } from '../noryInventoryAPI.schemas';

export const getListLocationMenuItemsResponseMock = (): LocationMenuItem[] =>
  Array.from(
    { length: faker.number.int({ min: 1, max: 10 }) },
    (_, i) => i + 1
  ).map(() => ({
    id: faker.word.sample(),
    locationId: faker.word.sample(),
    modifierIds: faker.helpers.arrayElement([
      Array.from(
        { length: faker.number.int({ min: 1, max: 10 }) },
        (_, i) => i + 1
      ).map(() => faker.word.sample()),
      undefined,
    ]),
    price: faker.number.int({ min: 0, max: undefined }),
    recipeId: faker.word.sample(),
  }));

export const getCreateLocationMenuItemResponseMock = (
  overrideResponse: Partial<LocationMenuItem> = {}
): LocationMenuItem => ({
  id: faker.word.sample(),
  locationId: faker.word.sample(),
  modifierIds: faker.helpers.arrayElement([
    Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1
    ).map(() => faker.word.sample()),
    undefined,
  ]),
  price: faker.number.int({ min: 0, max: undefined }),
  recipeId: faker.word.sample(),
  ...overrideResponse,
});

export const getGetLocationMenuItemByIdResponseMock = (
  overrideResponse: Partial<LocationMenuItem> = {}
): LocationMenuItem => ({
  id: faker.word.sample(),
  locationId: faker.word.sample(),
  modifierIds: faker.helpers.arrayElement([
    Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1
    ).map(() => faker.word.sample()),
    undefined,
  ]),
  price: faker.number.int({ min: 0, max: undefined }),
  recipeId: faker.word.sample(),
  ...overrideResponse,
});

export const getUpdateLocationMenuItemResponseMock = (
  overrideResponse: Partial<LocationMenuItem> = {}
): LocationMenuItem => ({
  id: faker.word.sample(),
  locationId: faker.word.sample(),
  modifierIds: faker.helpers.arrayElement([
    Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1
    ).map(() => faker.word.sample()),
    undefined,
  ]),
  price: faker.number.int({ min: 0, max: undefined }),
  recipeId: faker.word.sample(),
  ...overrideResponse,
});

export const getListLocationMenuItemsMockHandler = (
  overrideResponse?:
    | LocationMenuItem[]
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0]
      ) => Promise<LocationMenuItem[]> | LocationMenuItem[])
) => {
  return http.get('*/locations/:locationId/menuItems', async (info) => {
    await delay(1000);
    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === 'function'
            ? await overrideResponse(info)
            : overrideResponse
          : getListLocationMenuItemsResponseMock()
      ),
      {
        status: 200,
        headers: {
          'Content-Type': 'application/json',
        },
      }
    );
  });
};

export const getCreateLocationMenuItemMockHandler = (
  overrideResponse?:
    | LocationMenuItem
    | ((
        info: Parameters<Parameters<typeof http.post>[1]>[0]
      ) => Promise<LocationMenuItem> | LocationMenuItem)
) => {
  return http.post('*/locations/:locationId/menuItems', async (info) => {
    await delay(1000);
    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === 'function'
            ? await overrideResponse(info)
            : overrideResponse
          : getCreateLocationMenuItemResponseMock()
      ),
      {
        status: 201,
        headers: {
          'Content-Type': 'application/json',
        },
      }
    );
  });
};

export const getGetLocationMenuItemByIdMockHandler = (
  overrideResponse?:
    | LocationMenuItem
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0]
      ) => Promise<LocationMenuItem> | LocationMenuItem)
) => {
  return http.get(
    '*/locations/:locationId/menuItems/:menuItemId',
    async (info) => {
      await delay(1000);
      return new HttpResponse(
        JSON.stringify(
          overrideResponse !== undefined
            ? typeof overrideResponse === 'function'
              ? await overrideResponse(info)
              : overrideResponse
            : getGetLocationMenuItemByIdResponseMock()
        ),
        {
          status: 200,
          headers: {
            'Content-Type': 'application/json',
          },
        }
      );
    }
  );
};

export const getUpdateLocationMenuItemMockHandler = (
  overrideResponse?:
    | LocationMenuItem
    | ((
        info: Parameters<Parameters<typeof http.patch>[1]>[0]
      ) => Promise<LocationMenuItem> | LocationMenuItem)
) => {
  return http.patch(
    '*/locations/:locationId/menuItems/:menuItemId',
    async (info) => {
      await delay(1000);
      return new HttpResponse(
        JSON.stringify(
          overrideResponse !== undefined
            ? typeof overrideResponse === 'function'
              ? await overrideResponse(info)
              : overrideResponse
            : getUpdateLocationMenuItemResponseMock()
        ),
        {
          status: 200,
          headers: {
            'Content-Type': 'application/json',
          },
        }
      );
    }
  );
};

export const getDeleteLocationMenuItemMockHandler = () => {
  return http.delete(
    '*/locations/:locationId/menuItems/:menuItemId',
    async () => {
      await delay(1000);
      return new HttpResponse(null, {
        status: 204,
        headers: {
          'Content-Type': 'application/json',
        },
      });
    }
  );
};
export const getLocationMenuItemsMock = () => [
  getListLocationMenuItemsMockHandler(),
  getCreateLocationMenuItemMockHandler(),
  getGetLocationMenuItemByIdMockHandler(),
  getUpdateLocationMenuItemMockHandler(),
  getDeleteLocationMenuItemMockHandler(),
];
