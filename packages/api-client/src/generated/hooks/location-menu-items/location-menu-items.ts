/**
 * Generated by orval v6.31.0 üç∫
 * Do not edit manually.
 * Nory Inventory API
 * API for managing inventory, staff, locations, recipes, menu items, and related data for Nory.
 * OpenAPI spec version: 1.0.0
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query'
import type {
  MutationFunction,
  QueryFunction,
  QueryKey,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query'
import axios from 'axios'
import type {
  AxiosError,
  AxiosRequestConfig,
  AxiosResponse
} from 'axios'
import type {
  BadRequestResponse,
  ConflictResponse,
  InternalServerErrorResponse,
  LocationMenuItem,
  LocationMenuItemCreate,
  LocationMenuItemUpdate,
  NotFoundResponse
} from '../noryInventoryAPI.schemas'



/**
 * Retrieve a list of all menu items available at the specified location, including prices and enabled modifiers.
 * @summary List menu items for a specific location
 */
export const listLocationMenuItems = (
    locationId: string, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<LocationMenuItem[]>> => {
    
    return axios.get(
      `/locations/${locationId}/menuItems`,options
    );
  }


export const getListLocationMenuItemsQueryKey = (locationId: string,) => {
    return [`/locations/${locationId}/menuItems`] as const;
    }

    
export const getListLocationMenuItemsQueryOptions = <TData = Awaited<ReturnType<typeof listLocationMenuItems>>, TError = AxiosError<NotFoundResponse | InternalServerErrorResponse>>(locationId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof listLocationMenuItems>>, TError, TData>>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getListLocationMenuItemsQueryKey(locationId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof listLocationMenuItems>>> = ({ signal }) => listLocationMenuItems(locationId, { signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, enabled: !!(locationId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof listLocationMenuItems>>, TError, TData> & { queryKey: QueryKey }
}

export type ListLocationMenuItemsQueryResult = NonNullable<Awaited<ReturnType<typeof listLocationMenuItems>>>
export type ListLocationMenuItemsQueryError = AxiosError<NotFoundResponse | InternalServerErrorResponse>

/**
 * @summary List menu items for a specific location
 */
export const useListLocationMenuItems = <TData = Awaited<ReturnType<typeof listLocationMenuItems>>, TError = AxiosError<NotFoundResponse | InternalServerErrorResponse>>(
 locationId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof listLocationMenuItems>>, TError, TData>>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getListLocationMenuItemsQueryOptions(locationId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * Create a link between a recipe and a location, defining its price and available modifiers as a menu item.
 * @summary Add a recipe as a menu item to a location
 */
export const createLocationMenuItem = (
    locationId: string,
    locationMenuItemCreate: LocationMenuItemCreate, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<LocationMenuItem>> => {
    
    return axios.post(
      `/locations/${locationId}/menuItems`,
      locationMenuItemCreate,options
    );
  }



export const getCreateLocationMenuItemMutationOptions = <TError = AxiosError<BadRequestResponse | NotFoundResponse | ConflictResponse | InternalServerErrorResponse>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createLocationMenuItem>>, TError,{locationId: string;data: LocationMenuItemCreate}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof createLocationMenuItem>>, TError,{locationId: string;data: LocationMenuItemCreate}, TContext> => {
const {mutation: mutationOptions, axios: axiosOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof createLocationMenuItem>>, {locationId: string;data: LocationMenuItemCreate}> = (props) => {
          const {locationId,data} = props ?? {};

          return  createLocationMenuItem(locationId,data,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type CreateLocationMenuItemMutationResult = NonNullable<Awaited<ReturnType<typeof createLocationMenuItem>>>
    export type CreateLocationMenuItemMutationBody = LocationMenuItemCreate
    export type CreateLocationMenuItemMutationError = AxiosError<BadRequestResponse | NotFoundResponse | ConflictResponse | InternalServerErrorResponse>

    /**
 * @summary Add a recipe as a menu item to a location
 */
export const useCreateLocationMenuItem = <TError = AxiosError<BadRequestResponse | NotFoundResponse | ConflictResponse | InternalServerErrorResponse>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createLocationMenuItem>>, TError,{locationId: string;data: LocationMenuItemCreate}, TContext>, axios?: AxiosRequestConfig}
): UseMutationResult<
        Awaited<ReturnType<typeof createLocationMenuItem>>,
        TError,
        {locationId: string;data: LocationMenuItemCreate},
        TContext
      > => {

      const mutationOptions = getCreateLocationMenuItemMutationOptions(options);

      return useMutation(mutationOptions);
    }
    /**
 * Retrieve a specific menu item using its unique ID within the context of a location.
 * @summary Get a menu item by ID for a location
 */
export const getLocationMenuItemById = (
    locationId: string,
    menuItemId: string, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<LocationMenuItem>> => {
    
    return axios.get(
      `/locations/${locationId}/menuItems/${menuItemId}`,options
    );
  }


export const getGetLocationMenuItemByIdQueryKey = (locationId: string,
    menuItemId: string,) => {
    return [`/locations/${locationId}/menuItems/${menuItemId}`] as const;
    }

    
export const getGetLocationMenuItemByIdQueryOptions = <TData = Awaited<ReturnType<typeof getLocationMenuItemById>>, TError = AxiosError<NotFoundResponse | InternalServerErrorResponse>>(locationId: string,
    menuItemId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getLocationMenuItemById>>, TError, TData>>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetLocationMenuItemByIdQueryKey(locationId,menuItemId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getLocationMenuItemById>>> = ({ signal }) => getLocationMenuItemById(locationId,menuItemId, { signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, enabled: !!(locationId && menuItemId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getLocationMenuItemById>>, TError, TData> & { queryKey: QueryKey }
}

export type GetLocationMenuItemByIdQueryResult = NonNullable<Awaited<ReturnType<typeof getLocationMenuItemById>>>
export type GetLocationMenuItemByIdQueryError = AxiosError<NotFoundResponse | InternalServerErrorResponse>

/**
 * @summary Get a menu item by ID for a location
 */
export const useGetLocationMenuItemById = <TData = Awaited<ReturnType<typeof getLocationMenuItemById>>, TError = AxiosError<NotFoundResponse | InternalServerErrorResponse>>(
 locationId: string,
    menuItemId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getLocationMenuItemById>>, TError, TData>>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetLocationMenuItemByIdQueryOptions(locationId,menuItemId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * Update details (like price or modifiers) of an existing menu item at the specified location.
 * @summary Update a menu item for a location
 */
export const updateLocationMenuItem = (
    locationId: string,
    menuItemId: string,
    locationMenuItemUpdate: LocationMenuItemUpdate, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<LocationMenuItem>> => {
    
    return axios.patch(
      `/locations/${locationId}/menuItems/${menuItemId}`,
      locationMenuItemUpdate,options
    );
  }



export const getUpdateLocationMenuItemMutationOptions = <TError = AxiosError<BadRequestResponse | NotFoundResponse | InternalServerErrorResponse>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateLocationMenuItem>>, TError,{locationId: string;menuItemId: string;data: LocationMenuItemUpdate}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof updateLocationMenuItem>>, TError,{locationId: string;menuItemId: string;data: LocationMenuItemUpdate}, TContext> => {
const {mutation: mutationOptions, axios: axiosOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof updateLocationMenuItem>>, {locationId: string;menuItemId: string;data: LocationMenuItemUpdate}> = (props) => {
          const {locationId,menuItemId,data} = props ?? {};

          return  updateLocationMenuItem(locationId,menuItemId,data,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type UpdateLocationMenuItemMutationResult = NonNullable<Awaited<ReturnType<typeof updateLocationMenuItem>>>
    export type UpdateLocationMenuItemMutationBody = LocationMenuItemUpdate
    export type UpdateLocationMenuItemMutationError = AxiosError<BadRequestResponse | NotFoundResponse | InternalServerErrorResponse>

    /**
 * @summary Update a menu item for a location
 */
export const useUpdateLocationMenuItem = <TError = AxiosError<BadRequestResponse | NotFoundResponse | InternalServerErrorResponse>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateLocationMenuItem>>, TError,{locationId: string;menuItemId: string;data: LocationMenuItemUpdate}, TContext>, axios?: AxiosRequestConfig}
): UseMutationResult<
        Awaited<ReturnType<typeof updateLocationMenuItem>>,
        TError,
        {locationId: string;menuItemId: string;data: LocationMenuItemUpdate},
        TContext
      > => {

      const mutationOptions = getUpdateLocationMenuItemMutationOptions(options);

      return useMutation(mutationOptions);
    }
    /**
 * Make a menu item unavailable at a specific location.
 * @summary Remove a menu item from a location
 */
export const deleteLocationMenuItem = (
    locationId: string,
    menuItemId: string, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<void>> => {
    
    return axios.delete(
      `/locations/${locationId}/menuItems/${menuItemId}`,options
    );
  }



export const getDeleteLocationMenuItemMutationOptions = <TError = AxiosError<NotFoundResponse | InternalServerErrorResponse>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteLocationMenuItem>>, TError,{locationId: string;menuItemId: string}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof deleteLocationMenuItem>>, TError,{locationId: string;menuItemId: string}, TContext> => {
const {mutation: mutationOptions, axios: axiosOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteLocationMenuItem>>, {locationId: string;menuItemId: string}> = (props) => {
          const {locationId,menuItemId} = props ?? {};

          return  deleteLocationMenuItem(locationId,menuItemId,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteLocationMenuItemMutationResult = NonNullable<Awaited<ReturnType<typeof deleteLocationMenuItem>>>
    
    export type DeleteLocationMenuItemMutationError = AxiosError<NotFoundResponse | InternalServerErrorResponse>

    /**
 * @summary Remove a menu item from a location
 */
export const useDeleteLocationMenuItem = <TError = AxiosError<NotFoundResponse | InternalServerErrorResponse>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteLocationMenuItem>>, TError,{locationId: string;menuItemId: string}, TContext>, axios?: AxiosRequestConfig}
): UseMutationResult<
        Awaited<ReturnType<typeof deleteLocationMenuItem>>,
        TError,
        {locationId: string;menuItemId: string},
        TContext
      > => {

      const mutationOptions = getDeleteLocationMenuItemMutationOptions(options);

      return useMutation(mutationOptions);
    }
    