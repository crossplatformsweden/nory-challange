/**
 * Generated by orval v6.31.0 🍺
 * Do not edit manually.
 * Nory Inventory API
 * API for managing inventory, staff, locations, recipes, menu items, and related data for Nory.
 * OpenAPI spec version: 1.0.0
 */
import { faker } from '@faker-js/faker';
import { HttpResponse, delay, http } from 'msw';
import type { InventoryStock } from '../noryInventoryAPI.schemas';

export const getListInventoryStockResponseMock = (): InventoryStock[] =>
  Array.from(
    { length: faker.number.int({ min: 1, max: 10 }) },
    (_, i) => i + 1
  ).map(() => ({
    id: faker.word.sample(),
    ingredient: {
      id: faker.word.sample(),
      name: faker.word.sample(),
      unit: faker.word.sample(),
    },
    ingredientId: faker.word.sample(),
    location: { id: faker.word.sample(), name: faker.word.sample() },
    locationId: faker.word.sample(),
    quantity: faker.number.int({ min: 0, max: undefined }),
    updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
  }));

export const getCreateInventoryStockResponseMock = (
  overrideResponse: Partial<InventoryStock> = {}
): InventoryStock => ({
  id: faker.word.sample(),
  ingredient: {
    id: faker.word.sample(),
    name: faker.word.sample(),
    unit: faker.word.sample(),
  },
  ingredientId: faker.word.sample(),
  location: { id: faker.word.sample(), name: faker.word.sample() },
  locationId: faker.word.sample(),
  quantity: faker.number.int({ min: 0, max: undefined }),
  updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
  ...overrideResponse,
});

export const getGetInventoryStockByIdResponseMock = (
  overrideResponse: Partial<InventoryStock> = {}
): InventoryStock => ({
  id: faker.word.sample(),
  ingredient: {
    id: faker.word.sample(),
    name: faker.word.sample(),
    unit: faker.word.sample(),
  },
  ingredientId: faker.word.sample(),
  location: { id: faker.word.sample(), name: faker.word.sample() },
  locationId: faker.word.sample(),
  quantity: faker.number.int({ min: 0, max: undefined }),
  updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
  ...overrideResponse,
});

export const getUpdateInventoryStockResponseMock = (
  overrideResponse: Partial<InventoryStock> = {}
): InventoryStock => ({
  id: faker.word.sample(),
  ingredient: {
    id: faker.word.sample(),
    name: faker.word.sample(),
    unit: faker.word.sample(),
  },
  ingredientId: faker.word.sample(),
  location: { id: faker.word.sample(), name: faker.word.sample() },
  locationId: faker.word.sample(),
  quantity: faker.number.int({ min: 0, max: undefined }),
  updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
  ...overrideResponse,
});

export const getListInventoryStockMockHandler = (
  overrideResponse?:
    | InventoryStock[]
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0]
      ) => Promise<InventoryStock[]> | InventoryStock[])
) => {
  return http.get('*/inventory_stock', async (info) => {
    await delay(1000);
    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === 'function'
            ? await overrideResponse(info)
            : overrideResponse
          : getListInventoryStockResponseMock()
      ),
      {
        status: 200,
        headers: {
          'Content-Type': 'application/json',
        },
      }
    );
  });
};

export const getCreateInventoryStockMockHandler = (
  overrideResponse?:
    | InventoryStock
    | ((
        info: Parameters<Parameters<typeof http.post>[1]>[0]
      ) => Promise<InventoryStock> | InventoryStock)
) => {
  return http.post('*/inventory_stock', async (info) => {
    await delay(1000);
    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === 'function'
            ? await overrideResponse(info)
            : overrideResponse
          : getCreateInventoryStockResponseMock()
      ),
      {
        status: 201,
        headers: {
          'Content-Type': 'application/json',
        },
      }
    );
  });
};

export const getGetInventoryStockByIdMockHandler = (
  overrideResponse?:
    | InventoryStock
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0]
      ) => Promise<InventoryStock> | InventoryStock)
) => {
  return http.get('*/inventory_stock/:stockId', async (info) => {
    await delay(1000);
    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === 'function'
            ? await overrideResponse(info)
            : overrideResponse
          : getGetInventoryStockByIdResponseMock()
      ),
      {
        status: 200,
        headers: {
          'Content-Type': 'application/json',
        },
      }
    );
  });
};

export const getUpdateInventoryStockMockHandler = (
  overrideResponse?:
    | InventoryStock
    | ((
        info: Parameters<Parameters<typeof http.patch>[1]>[0]
      ) => Promise<InventoryStock> | InventoryStock)
) => {
  return http.patch('*/inventory_stock/:stockId', async (info) => {
    await delay(1000);
    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === 'function'
            ? await overrideResponse(info)
            : overrideResponse
          : getUpdateInventoryStockResponseMock()
      ),
      {
        status: 200,
        headers: {
          'Content-Type': 'application/json',
        },
      }
    );
  });
};

export const getDeleteInventoryStockMockHandler = () => {
  return http.delete('*/inventory_stock/:stockId', async () => {
    await delay(1000);
    return new HttpResponse(null, {
      status: 204,
      headers: {
        'Content-Type': 'application/json',
      },
    });
  });
};
export const getInventoryStockMock = () => [
  getListInventoryStockMockHandler(),
  getCreateInventoryStockMockHandler(),
  getGetInventoryStockByIdMockHandler(),
  getUpdateInventoryStockMockHandler(),
  getDeleteInventoryStockMockHandler(),
];
