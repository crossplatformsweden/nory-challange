/**
 * Generated by orval v6.31.0 🍺
 * Do not edit manually.
 * Nory Inventory API
 * API for managing inventory, staff, locations, recipes, menu items, and related data for Nory.
 * OpenAPI spec version: 1.0.0
 */
import {
  faker
} from '@faker-js/faker'
import {
  HttpResponse,
  delay,
  http
} from 'msw'
import type {
  Ingredient,
  InventoryMovement,
  InventoryStock,
  Location,
  LocationIngredientCost,
  LocationMenuItem,
  Modifier,
  ModifierOption,
  Recipe,
  RecipeIngredientLink,
  Staff
} from './model'

export const getListLocationsResponseMock = (): Location[] => (Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({address: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.word.sample(), name: faker.word.sample()})))

export const getCreateLocationResponseMock = (overrideResponse: Partial< Location > = {}): Location => ({address: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.word.sample(), name: faker.word.sample(), ...overrideResponse})

export const getGetLocationByIdResponseMock = (overrideResponse: Partial< Location > = {}): Location => ({address: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.word.sample(), name: faker.word.sample(), ...overrideResponse})

export const getUpdateLocationResponseMock = (overrideResponse: Partial< Location > = {}): Location => ({address: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.word.sample(), name: faker.word.sample(), ...overrideResponse})

export const getListStaffByLocationResponseMock = (): Staff[] => (Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({bic: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), dob: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.date.past().toISOString().split('T')[0], null]), undefined]), iban: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.word.sample(), locationId: faker.word.sample(), name: faker.word.sample(), role: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})))

export const getCreateStaffAtLocationResponseMock = (overrideResponse: Partial< Staff > = {}): Staff => ({bic: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), dob: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.date.past().toISOString().split('T')[0], null]), undefined]), iban: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.word.sample(), locationId: faker.word.sample(), name: faker.word.sample(), role: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), ...overrideResponse})

export const getGetStaffByLocationAndIdResponseMock = (overrideResponse: Partial< Staff > = {}): Staff => ({bic: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), dob: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.date.past().toISOString().split('T')[0], null]), undefined]), iban: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.word.sample(), locationId: faker.word.sample(), name: faker.word.sample(), role: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), ...overrideResponse})

export const getUpdateStaffAtLocationResponseMock = (overrideResponse: Partial< Staff > = {}): Staff => ({bic: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), dob: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.date.past().toISOString().split('T')[0], null]), undefined]), iban: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.word.sample(), locationId: faker.word.sample(), name: faker.word.sample(), role: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), ...overrideResponse})

export const getListIngredientsResponseMock = (): Ingredient[] => (Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({cost: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: 0, max: undefined}), null]), undefined]), id: faker.word.sample(), name: faker.word.sample(), unit: faker.word.sample()})))

export const getCreateIngredientResponseMock = (overrideResponse: Partial< Ingredient > = {}): Ingredient => ({cost: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: 0, max: undefined}), null]), undefined]), id: faker.word.sample(), name: faker.word.sample(), unit: faker.word.sample(), ...overrideResponse})

export const getGetIngredientByIdResponseMock = (overrideResponse: Partial< Ingredient > = {}): Ingredient => ({cost: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: 0, max: undefined}), null]), undefined]), id: faker.word.sample(), name: faker.word.sample(), unit: faker.word.sample(), ...overrideResponse})

export const getUpdateIngredientResponseMock = (overrideResponse: Partial< Ingredient > = {}): Ingredient => ({cost: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: 0, max: undefined}), null]), undefined]), id: faker.word.sample(), name: faker.word.sample(), unit: faker.word.sample(), ...overrideResponse})

export const getListRecipesResponseMock = (): Recipe[] => (Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.word.sample(), name: faker.word.sample()})))

export const getCreateRecipeResponseMock = (overrideResponse: Partial< Recipe > = {}): Recipe => ({description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.word.sample(), name: faker.word.sample(), ...overrideResponse})

export const getGetRecipeByIdResponseMock = (overrideResponse: Partial< Recipe > = {}): Recipe => ({description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.word.sample(), name: faker.word.sample(), ...overrideResponse})

export const getUpdateRecipeResponseMock = (overrideResponse: Partial< Recipe > = {}): Recipe => ({description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.word.sample(), name: faker.word.sample(), ...overrideResponse})

export const getListRecipeIngredientLinksResponseMock = (): RecipeIngredientLink[] => (Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.word.sample(), ingredientId: faker.word.sample(), quantity: faker.number.int({min: 0, max: undefined}), recipeId: faker.word.sample()})))

export const getCreateRecipeIngredientLinkResponseMock = (overrideResponse: Partial< RecipeIngredientLink > = {}): RecipeIngredientLink => ({id: faker.word.sample(), ingredientId: faker.word.sample(), quantity: faker.number.int({min: 0, max: undefined}), recipeId: faker.word.sample(), ...overrideResponse})

export const getListModifiersResponseMock = (): Modifier[] => (Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.word.sample(), name: faker.word.sample()})))

export const getCreateModifierResponseMock = (overrideResponse: Partial< Modifier > = {}): Modifier => ({id: faker.word.sample(), name: faker.word.sample(), ...overrideResponse})

export const getGetModifierByIdResponseMock = (overrideResponse: Partial< Modifier > = {}): Modifier => ({id: faker.word.sample(), name: faker.word.sample(), ...overrideResponse})

export const getUpdateModifierResponseMock = (overrideResponse: Partial< Modifier > = {}): Modifier => ({id: faker.word.sample(), name: faker.word.sample(), ...overrideResponse})

export const getListModifierOptionsResponseMock = (): ModifierOption[] => (Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.word.sample(), modifierId: faker.word.sample(), name: faker.word.sample(), price: faker.number.int({min: 0, max: undefined})})))

export const getCreateModifierOptionResponseMock = (overrideResponse: Partial< ModifierOption > = {}): ModifierOption => ({id: faker.word.sample(), modifierId: faker.word.sample(), name: faker.word.sample(), price: faker.number.int({min: 0, max: undefined}), ...overrideResponse})

export const getGetModifierOptionByIdResponseMock = (overrideResponse: Partial< ModifierOption > = {}): ModifierOption => ({id: faker.word.sample(), modifierId: faker.word.sample(), name: faker.word.sample(), price: faker.number.int({min: 0, max: undefined}), ...overrideResponse})

export const getUpdateModifierOptionResponseMock = (overrideResponse: Partial< ModifierOption > = {}): ModifierOption => ({id: faker.word.sample(), modifierId: faker.word.sample(), name: faker.word.sample(), price: faker.number.int({min: 0, max: undefined}), ...overrideResponse})

export const getListLocationMenuItemsResponseMock = (): LocationMenuItem[] => (Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.word.sample(), locationId: faker.word.sample(), modifierIds: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), price: faker.number.int({min: 0, max: undefined}), recipeId: faker.word.sample()})))

export const getCreateLocationMenuItemResponseMock = (overrideResponse: Partial< LocationMenuItem > = {}): LocationMenuItem => ({id: faker.word.sample(), locationId: faker.word.sample(), modifierIds: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), price: faker.number.int({min: 0, max: undefined}), recipeId: faker.word.sample(), ...overrideResponse})

export const getGetLocationMenuItemByIdResponseMock = (overrideResponse: Partial< LocationMenuItem > = {}): LocationMenuItem => ({id: faker.word.sample(), locationId: faker.word.sample(), modifierIds: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), price: faker.number.int({min: 0, max: undefined}), recipeId: faker.word.sample(), ...overrideResponse})

export const getUpdateLocationMenuItemResponseMock = (overrideResponse: Partial< LocationMenuItem > = {}): LocationMenuItem => ({id: faker.word.sample(), locationId: faker.word.sample(), modifierIds: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), price: faker.number.int({min: 0, max: undefined}), recipeId: faker.word.sample(), ...overrideResponse})

export const getListLocationIngredientCostsResponseMock = (): LocationIngredientCost[] => (Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({costPerUnit: faker.number.int({min: 0, max: undefined}), id: faker.word.sample(), ingredientId: faker.word.sample(), locationId: faker.word.sample(), updatedAt: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})))

export const getCreateLocationIngredientCostResponseMock = (overrideResponse: Partial< LocationIngredientCost > = {}): LocationIngredientCost => ({costPerUnit: faker.number.int({min: 0, max: undefined}), id: faker.word.sample(), ingredientId: faker.word.sample(), locationId: faker.word.sample(), updatedAt: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), ...overrideResponse})

export const getGetLocationIngredientCostByIdResponseMock = (overrideResponse: Partial< LocationIngredientCost > = {}): LocationIngredientCost => ({costPerUnit: faker.number.int({min: 0, max: undefined}), id: faker.word.sample(), ingredientId: faker.word.sample(), locationId: faker.word.sample(), updatedAt: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), ...overrideResponse})

export const getUpdateLocationIngredientCostResponseMock = (overrideResponse: Partial< LocationIngredientCost > = {}): LocationIngredientCost => ({costPerUnit: faker.number.int({min: 0, max: undefined}), id: faker.word.sample(), ingredientId: faker.word.sample(), locationId: faker.word.sample(), updatedAt: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), ...overrideResponse})

export const getListInventoryStockResponseMock = (): InventoryStock[] => (Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.word.sample(), ingredient: {id: faker.word.sample(), name: faker.word.sample(), unit: faker.word.sample()}, ingredientId: faker.word.sample(), location: {id: faker.word.sample(), name: faker.word.sample()}, locationId: faker.word.sample(), quantity: faker.number.int({min: 0, max: undefined}), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`})))

export const getCreateInventoryStockResponseMock = (overrideResponse: Partial< InventoryStock > = {}): InventoryStock => ({id: faker.word.sample(), ingredient: {id: faker.word.sample(), name: faker.word.sample(), unit: faker.word.sample()}, ingredientId: faker.word.sample(), location: {id: faker.word.sample(), name: faker.word.sample()}, locationId: faker.word.sample(), quantity: faker.number.int({min: 0, max: undefined}), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`, ...overrideResponse})

export const getGetInventoryStockByIdResponseMock = (overrideResponse: Partial< InventoryStock > = {}): InventoryStock => ({id: faker.word.sample(), ingredient: {id: faker.word.sample(), name: faker.word.sample(), unit: faker.word.sample()}, ingredientId: faker.word.sample(), location: {id: faker.word.sample(), name: faker.word.sample()}, locationId: faker.word.sample(), quantity: faker.number.int({min: 0, max: undefined}), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`, ...overrideResponse})

export const getUpdateInventoryStockResponseMock = (overrideResponse: Partial< InventoryStock > = {}): InventoryStock => ({id: faker.word.sample(), ingredient: {id: faker.word.sample(), name: faker.word.sample(), unit: faker.word.sample()}, ingredientId: faker.word.sample(), location: {id: faker.word.sample(), name: faker.word.sample()}, locationId: faker.word.sample(), quantity: faker.number.int({min: 0, max: undefined}), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`, ...overrideResponse})

export const getListInventoryMovementsResponseMock = (): InventoryMovement[] => (Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({costPerUnit: faker.helpers.arrayElement([faker.number.int({min: 0, max: undefined}), null]), createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, id: faker.word.sample(), ingredient: {id: faker.word.sample(), name: faker.word.sample(), unit: faker.word.sample()}, ingredientId: faker.word.sample(), locationId: faker.word.sample(), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), quantity: faker.number.int({min: undefined, max: undefined}), recordedByStaffId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), type: faker.helpers.arrayElement(['waste','restock','sale','adjustment','transfer_in','transfer_out'] as const), unit: faker.word.sample()})))

export const getCreateInventoryMovementResponseMock = (overrideResponse: Partial< InventoryMovement > = {}): InventoryMovement => ({costPerUnit: faker.helpers.arrayElement([faker.number.int({min: 0, max: undefined}), null]), createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, id: faker.word.sample(), ingredient: {id: faker.word.sample(), name: faker.word.sample(), unit: faker.word.sample()}, ingredientId: faker.word.sample(), locationId: faker.word.sample(), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), quantity: faker.number.int({min: undefined, max: undefined}), recordedByStaffId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), type: faker.helpers.arrayElement(['waste','restock','sale','adjustment','transfer_in','transfer_out'] as const), unit: faker.word.sample(), ...overrideResponse})


export const getListLocationsMockHandler = (overrideResponse?: Location[] | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<Location[]> | Location[])) => {
  return http.get('*/locations', async (info) => {await delay(1000);
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getListLocationsResponseMock()),
      {
        status: 200,
        headers: {
          'Content-Type': 'application/json',
        }
      }
    )
  })
}

export const getCreateLocationMockHandler = (overrideResponse?: Location | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<Location> | Location)) => {
  return http.post('*/locations', async (info) => {await delay(1000);
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getCreateLocationResponseMock()),
      {
        status: 201,
        headers: {
          'Content-Type': 'application/json',
        }
      }
    )
  })
}

export const getGetLocationByIdMockHandler = (overrideResponse?: Location | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<Location> | Location)) => {
  return http.get('*/locations/:locationId', async (info) => {await delay(1000);
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getGetLocationByIdResponseMock()),
      {
        status: 200,
        headers: {
          'Content-Type': 'application/json',
        }
      }
    )
  })
}

export const getUpdateLocationMockHandler = (overrideResponse?: Location | ((info: Parameters<Parameters<typeof http.patch>[1]>[0]) => Promise<Location> | Location)) => {
  return http.patch('*/locations/:locationId', async (info) => {await delay(1000);
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getUpdateLocationResponseMock()),
      {
        status: 200,
        headers: {
          'Content-Type': 'application/json',
        }
      }
    )
  })
}

export const getDeleteLocationMockHandler = () => {
  return http.delete('*/locations/:locationId', async () => {await delay(1000);
    return new HttpResponse(null,
      {
        status: 204,
        headers: {
          'Content-Type': 'application/json',
        }
      }
    )
  })
}

export const getListStaffByLocationMockHandler = (overrideResponse?: Staff[] | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<Staff[]> | Staff[])) => {
  return http.get('*/locations/:locationId/staff', async (info) => {await delay(1000);
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getListStaffByLocationResponseMock()),
      {
        status: 200,
        headers: {
          'Content-Type': 'application/json',
        }
      }
    )
  })
}

export const getCreateStaffAtLocationMockHandler = (overrideResponse?: Staff | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<Staff> | Staff)) => {
  return http.post('*/locations/:locationId/staff', async (info) => {await delay(1000);
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getCreateStaffAtLocationResponseMock()),
      {
        status: 201,
        headers: {
          'Content-Type': 'application/json',
        }
      }
    )
  })
}

export const getGetStaffByLocationAndIdMockHandler = (overrideResponse?: Staff | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<Staff> | Staff)) => {
  return http.get('*/locations/:locationId/staff/:staffId', async (info) => {await delay(1000);
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getGetStaffByLocationAndIdResponseMock()),
      {
        status: 200,
        headers: {
          'Content-Type': 'application/json',
        }
      }
    )
  })
}

export const getUpdateStaffAtLocationMockHandler = (overrideResponse?: Staff | ((info: Parameters<Parameters<typeof http.patch>[1]>[0]) => Promise<Staff> | Staff)) => {
  return http.patch('*/locations/:locationId/staff/:staffId', async (info) => {await delay(1000);
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getUpdateStaffAtLocationResponseMock()),
      {
        status: 200,
        headers: {
          'Content-Type': 'application/json',
        }
      }
    )
  })
}

export const getDeleteStaffAtLocationMockHandler = () => {
  return http.delete('*/locations/:locationId/staff/:staffId', async () => {await delay(1000);
    return new HttpResponse(null,
      {
        status: 204,
        headers: {
          'Content-Type': 'application/json',
        }
      }
    )
  })
}

export const getListIngredientsMockHandler = (overrideResponse?: Ingredient[] | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<Ingredient[]> | Ingredient[])) => {
  return http.get('*/ingredients', async (info) => {await delay(1000);
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getListIngredientsResponseMock()),
      {
        status: 200,
        headers: {
          'Content-Type': 'application/json',
        }
      }
    )
  })
}

export const getCreateIngredientMockHandler = (overrideResponse?: Ingredient | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<Ingredient> | Ingredient)) => {
  return http.post('*/ingredients', async (info) => {await delay(1000);
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getCreateIngredientResponseMock()),
      {
        status: 201,
        headers: {
          'Content-Type': 'application/json',
        }
      }
    )
  })
}

export const getGetIngredientByIdMockHandler = (overrideResponse?: Ingredient | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<Ingredient> | Ingredient)) => {
  return http.get('*/ingredients/:ingredientId', async (info) => {await delay(1000);
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getGetIngredientByIdResponseMock()),
      {
        status: 200,
        headers: {
          'Content-Type': 'application/json',
        }
      }
    )
  })
}

export const getUpdateIngredientMockHandler = (overrideResponse?: Ingredient | ((info: Parameters<Parameters<typeof http.patch>[1]>[0]) => Promise<Ingredient> | Ingredient)) => {
  return http.patch('*/ingredients/:ingredientId', async (info) => {await delay(1000);
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getUpdateIngredientResponseMock()),
      {
        status: 200,
        headers: {
          'Content-Type': 'application/json',
        }
      }
    )
  })
}

export const getDeleteIngredientMockHandler = () => {
  return http.delete('*/ingredients/:ingredientId', async () => {await delay(1000);
    return new HttpResponse(null,
      {
        status: 204,
        headers: {
          'Content-Type': 'application/json',
        }
      }
    )
  })
}

export const getListRecipesMockHandler = (overrideResponse?: Recipe[] | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<Recipe[]> | Recipe[])) => {
  return http.get('*/recipes', async (info) => {await delay(1000);
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getListRecipesResponseMock()),
      {
        status: 200,
        headers: {
          'Content-Type': 'application/json',
        }
      }
    )
  })
}

export const getCreateRecipeMockHandler = (overrideResponse?: Recipe | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<Recipe> | Recipe)) => {
  return http.post('*/recipes', async (info) => {await delay(1000);
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getCreateRecipeResponseMock()),
      {
        status: 201,
        headers: {
          'Content-Type': 'application/json',
        }
      }
    )
  })
}

export const getGetRecipeByIdMockHandler = (overrideResponse?: Recipe | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<Recipe> | Recipe)) => {
  return http.get('*/recipes/:recipeId', async (info) => {await delay(1000);
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getGetRecipeByIdResponseMock()),
      {
        status: 200,
        headers: {
          'Content-Type': 'application/json',
        }
      }
    )
  })
}

export const getUpdateRecipeMockHandler = (overrideResponse?: Recipe | ((info: Parameters<Parameters<typeof http.patch>[1]>[0]) => Promise<Recipe> | Recipe)) => {
  return http.patch('*/recipes/:recipeId', async (info) => {await delay(1000);
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getUpdateRecipeResponseMock()),
      {
        status: 200,
        headers: {
          'Content-Type': 'application/json',
        }
      }
    )
  })
}

export const getDeleteRecipeMockHandler = () => {
  return http.delete('*/recipes/:recipeId', async () => {await delay(1000);
    return new HttpResponse(null,
      {
        status: 204,
        headers: {
          'Content-Type': 'application/json',
        }
      }
    )
  })
}

export const getListRecipeIngredientLinksMockHandler = (overrideResponse?: RecipeIngredientLink[] | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<RecipeIngredientLink[]> | RecipeIngredientLink[])) => {
  return http.get('*/recipes/:recipeId/ingredientLinks', async (info) => {await delay(1000);
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getListRecipeIngredientLinksResponseMock()),
      {
        status: 200,
        headers: {
          'Content-Type': 'application/json',
        }
      }
    )
  })
}

export const getCreateRecipeIngredientLinkMockHandler = (overrideResponse?: RecipeIngredientLink | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<RecipeIngredientLink> | RecipeIngredientLink)) => {
  return http.post('*/recipes/:recipeId/ingredientLinks', async (info) => {await delay(1000);
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getCreateRecipeIngredientLinkResponseMock()),
      {
        status: 201,
        headers: {
          'Content-Type': 'application/json',
        }
      }
    )
  })
}

export const getDeleteRecipeIngredientLinkMockHandler = () => {
  return http.delete('*/recipes/:recipeId/ingredientLinks/:recipeIngredientLinkId', async () => {await delay(1000);
    return new HttpResponse(null,
      {
        status: 204,
        headers: {
          'Content-Type': 'application/json',
        }
      }
    )
  })
}

export const getListModifiersMockHandler = (overrideResponse?: Modifier[] | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<Modifier[]> | Modifier[])) => {
  return http.get('*/modifiers', async (info) => {await delay(1000);
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getListModifiersResponseMock()),
      {
        status: 200,
        headers: {
          'Content-Type': 'application/json',
        }
      }
    )
  })
}

export const getCreateModifierMockHandler = (overrideResponse?: Modifier | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<Modifier> | Modifier)) => {
  return http.post('*/modifiers', async (info) => {await delay(1000);
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getCreateModifierResponseMock()),
      {
        status: 201,
        headers: {
          'Content-Type': 'application/json',
        }
      }
    )
  })
}

export const getGetModifierByIdMockHandler = (overrideResponse?: Modifier | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<Modifier> | Modifier)) => {
  return http.get('*/modifiers/:modifierId', async (info) => {await delay(1000);
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getGetModifierByIdResponseMock()),
      {
        status: 200,
        headers: {
          'Content-Type': 'application/json',
        }
      }
    )
  })
}

export const getUpdateModifierMockHandler = (overrideResponse?: Modifier | ((info: Parameters<Parameters<typeof http.patch>[1]>[0]) => Promise<Modifier> | Modifier)) => {
  return http.patch('*/modifiers/:modifierId', async (info) => {await delay(1000);
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getUpdateModifierResponseMock()),
      {
        status: 200,
        headers: {
          'Content-Type': 'application/json',
        }
      }
    )
  })
}

export const getDeleteModifierMockHandler = () => {
  return http.delete('*/modifiers/:modifierId', async () => {await delay(1000);
    return new HttpResponse(null,
      {
        status: 204,
        headers: {
          'Content-Type': 'application/json',
        }
      }
    )
  })
}

export const getListModifierOptionsMockHandler = (overrideResponse?: ModifierOption[] | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<ModifierOption[]> | ModifierOption[])) => {
  return http.get('*/modifiers/:modifierId/options', async (info) => {await delay(1000);
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getListModifierOptionsResponseMock()),
      {
        status: 200,
        headers: {
          'Content-Type': 'application/json',
        }
      }
    )
  })
}

export const getCreateModifierOptionMockHandler = (overrideResponse?: ModifierOption | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<ModifierOption> | ModifierOption)) => {
  return http.post('*/modifiers/:modifierId/options', async (info) => {await delay(1000);
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getCreateModifierOptionResponseMock()),
      {
        status: 201,
        headers: {
          'Content-Type': 'application/json',
        }
      }
    )
  })
}

export const getGetModifierOptionByIdMockHandler = (overrideResponse?: ModifierOption | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<ModifierOption> | ModifierOption)) => {
  return http.get('*/modifiers/:modifierId/options/:modifierOptionId', async (info) => {await delay(1000);
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getGetModifierOptionByIdResponseMock()),
      {
        status: 200,
        headers: {
          'Content-Type': 'application/json',
        }
      }
    )
  })
}

export const getUpdateModifierOptionMockHandler = (overrideResponse?: ModifierOption | ((info: Parameters<Parameters<typeof http.patch>[1]>[0]) => Promise<ModifierOption> | ModifierOption)) => {
  return http.patch('*/modifiers/:modifierId/options/:modifierOptionId', async (info) => {await delay(1000);
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getUpdateModifierOptionResponseMock()),
      {
        status: 200,
        headers: {
          'Content-Type': 'application/json',
        }
      }
    )
  })
}

export const getDeleteModifierOptionMockHandler = () => {
  return http.delete('*/modifiers/:modifierId/options/:modifierOptionId', async () => {await delay(1000);
    return new HttpResponse(null,
      {
        status: 204,
        headers: {
          'Content-Type': 'application/json',
        }
      }
    )
  })
}

export const getListLocationMenuItemsMockHandler = (overrideResponse?: LocationMenuItem[] | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<LocationMenuItem[]> | LocationMenuItem[])) => {
  return http.get('*/locations/:locationId/menuItems', async (info) => {await delay(1000);
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getListLocationMenuItemsResponseMock()),
      {
        status: 200,
        headers: {
          'Content-Type': 'application/json',
        }
      }
    )
  })
}

export const getCreateLocationMenuItemMockHandler = (overrideResponse?: LocationMenuItem | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<LocationMenuItem> | LocationMenuItem)) => {
  return http.post('*/locations/:locationId/menuItems', async (info) => {await delay(1000);
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getCreateLocationMenuItemResponseMock()),
      {
        status: 201,
        headers: {
          'Content-Type': 'application/json',
        }
      }
    )
  })
}

export const getGetLocationMenuItemByIdMockHandler = (overrideResponse?: LocationMenuItem | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<LocationMenuItem> | LocationMenuItem)) => {
  return http.get('*/locations/:locationId/menuItems/:menuItemId', async (info) => {await delay(1000);
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getGetLocationMenuItemByIdResponseMock()),
      {
        status: 200,
        headers: {
          'Content-Type': 'application/json',
        }
      }
    )
  })
}

export const getUpdateLocationMenuItemMockHandler = (overrideResponse?: LocationMenuItem | ((info: Parameters<Parameters<typeof http.patch>[1]>[0]) => Promise<LocationMenuItem> | LocationMenuItem)) => {
  return http.patch('*/locations/:locationId/menuItems/:menuItemId', async (info) => {await delay(1000);
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getUpdateLocationMenuItemResponseMock()),
      {
        status: 200,
        headers: {
          'Content-Type': 'application/json',
        }
      }
    )
  })
}

export const getDeleteLocationMenuItemMockHandler = () => {
  return http.delete('*/locations/:locationId/menuItems/:menuItemId', async () => {await delay(1000);
    return new HttpResponse(null,
      {
        status: 204,
        headers: {
          'Content-Type': 'application/json',
        }
      }
    )
  })
}

export const getListLocationIngredientCostsMockHandler = (overrideResponse?: LocationIngredientCost[] | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<LocationIngredientCost[]> | LocationIngredientCost[])) => {
  return http.get('*/locations/:locationId/ingredientCosts', async (info) => {await delay(1000);
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getListLocationIngredientCostsResponseMock()),
      {
        status: 200,
        headers: {
          'Content-Type': 'application/json',
        }
      }
    )
  })
}

export const getCreateLocationIngredientCostMockHandler = (overrideResponse?: LocationIngredientCost | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<LocationIngredientCost> | LocationIngredientCost)) => {
  return http.post('*/locations/:locationId/ingredientCosts', async (info) => {await delay(1000);
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getCreateLocationIngredientCostResponseMock()),
      {
        status: 201,
        headers: {
          'Content-Type': 'application/json',
        }
      }
    )
  })
}

export const getGetLocationIngredientCostByIdMockHandler = (overrideResponse?: LocationIngredientCost | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<LocationIngredientCost> | LocationIngredientCost)) => {
  return http.get('*/locations/:locationId/ingredientCosts/:locationIngredientCostId', async (info) => {await delay(1000);
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getGetLocationIngredientCostByIdResponseMock()),
      {
        status: 200,
        headers: {
          'Content-Type': 'application/json',
        }
      }
    )
  })
}

export const getUpdateLocationIngredientCostMockHandler = (overrideResponse?: LocationIngredientCost | ((info: Parameters<Parameters<typeof http.patch>[1]>[0]) => Promise<LocationIngredientCost> | LocationIngredientCost)) => {
  return http.patch('*/locations/:locationId/ingredientCosts/:locationIngredientCostId', async (info) => {await delay(1000);
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getUpdateLocationIngredientCostResponseMock()),
      {
        status: 200,
        headers: {
          'Content-Type': 'application/json',
        }
      }
    )
  })
}

export const getDeleteLocationIngredientCostMockHandler = () => {
  return http.delete('*/locations/:locationId/ingredientCosts/:locationIngredientCostId', async () => {await delay(1000);
    return new HttpResponse(null,
      {
        status: 204,
        headers: {
          'Content-Type': 'application/json',
        }
      }
    )
  })
}

export const getListInventoryStockMockHandler = (overrideResponse?: InventoryStock[] | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<InventoryStock[]> | InventoryStock[])) => {
  return http.get('*/inventory_stock', async (info) => {await delay(1000);
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getListInventoryStockResponseMock()),
      {
        status: 200,
        headers: {
          'Content-Type': 'application/json',
        }
      }
    )
  })
}

export const getCreateInventoryStockMockHandler = (overrideResponse?: InventoryStock | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<InventoryStock> | InventoryStock)) => {
  return http.post('*/inventory_stock', async (info) => {await delay(1000);
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getCreateInventoryStockResponseMock()),
      {
        status: 201,
        headers: {
          'Content-Type': 'application/json',
        }
      }
    )
  })
}

export const getGetInventoryStockByIdMockHandler = (overrideResponse?: InventoryStock | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<InventoryStock> | InventoryStock)) => {
  return http.get('*/inventory_stock/:stockId', async (info) => {await delay(1000);
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getGetInventoryStockByIdResponseMock()),
      {
        status: 200,
        headers: {
          'Content-Type': 'application/json',
        }
      }
    )
  })
}

export const getUpdateInventoryStockMockHandler = (overrideResponse?: InventoryStock | ((info: Parameters<Parameters<typeof http.patch>[1]>[0]) => Promise<InventoryStock> | InventoryStock)) => {
  return http.patch('*/inventory_stock/:stockId', async (info) => {await delay(1000);
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getUpdateInventoryStockResponseMock()),
      {
        status: 200,
        headers: {
          'Content-Type': 'application/json',
        }
      }
    )
  })
}

export const getDeleteInventoryStockMockHandler = () => {
  return http.delete('*/inventory_stock/:stockId', async () => {await delay(1000);
    return new HttpResponse(null,
      {
        status: 204,
        headers: {
          'Content-Type': 'application/json',
        }
      }
    )
  })
}

export const getListInventoryMovementsMockHandler = (overrideResponse?: InventoryMovement[] | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<InventoryMovement[]> | InventoryMovement[])) => {
  return http.get('*/inventory_movements', async (info) => {await delay(1000);
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getListInventoryMovementsResponseMock()),
      {
        status: 200,
        headers: {
          'Content-Type': 'application/json',
        }
      }
    )
  })
}

export const getCreateInventoryMovementMockHandler = (overrideResponse?: InventoryMovement | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<InventoryMovement> | InventoryMovement)) => {
  return http.post('*/inventory_movements', async (info) => {await delay(1000);
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getCreateInventoryMovementResponseMock()),
      {
        status: 201,
        headers: {
          'Content-Type': 'application/json',
        }
      }
    )
  })
}
export const getNoryInventoryAPIMock = () => [
  getListLocationsMockHandler(),
  getCreateLocationMockHandler(),
  getGetLocationByIdMockHandler(),
  getUpdateLocationMockHandler(),
  getDeleteLocationMockHandler(),
  getListStaffByLocationMockHandler(),
  getCreateStaffAtLocationMockHandler(),
  getGetStaffByLocationAndIdMockHandler(),
  getUpdateStaffAtLocationMockHandler(),
  getDeleteStaffAtLocationMockHandler(),
  getListIngredientsMockHandler(),
  getCreateIngredientMockHandler(),
  getGetIngredientByIdMockHandler(),
  getUpdateIngredientMockHandler(),
  getDeleteIngredientMockHandler(),
  getListRecipesMockHandler(),
  getCreateRecipeMockHandler(),
  getGetRecipeByIdMockHandler(),
  getUpdateRecipeMockHandler(),
  getDeleteRecipeMockHandler(),
  getListRecipeIngredientLinksMockHandler(),
  getCreateRecipeIngredientLinkMockHandler(),
  getDeleteRecipeIngredientLinkMockHandler(),
  getListModifiersMockHandler(),
  getCreateModifierMockHandler(),
  getGetModifierByIdMockHandler(),
  getUpdateModifierMockHandler(),
  getDeleteModifierMockHandler(),
  getListModifierOptionsMockHandler(),
  getCreateModifierOptionMockHandler(),
  getGetModifierOptionByIdMockHandler(),
  getUpdateModifierOptionMockHandler(),
  getDeleteModifierOptionMockHandler(),
  getListLocationMenuItemsMockHandler(),
  getCreateLocationMenuItemMockHandler(),
  getGetLocationMenuItemByIdMockHandler(),
  getUpdateLocationMenuItemMockHandler(),
  getDeleteLocationMenuItemMockHandler(),
  getListLocationIngredientCostsMockHandler(),
  getCreateLocationIngredientCostMockHandler(),
  getGetLocationIngredientCostByIdMockHandler(),
  getUpdateLocationIngredientCostMockHandler(),
  getDeleteLocationIngredientCostMockHandler(),
  getListInventoryStockMockHandler(),
  getCreateInventoryStockMockHandler(),
  getGetInventoryStockByIdMockHandler(),
  getUpdateInventoryStockMockHandler(),
  getDeleteInventoryStockMockHandler(),
  getListInventoryMovementsMockHandler(),
  getCreateInventoryMovementMockHandler()]
