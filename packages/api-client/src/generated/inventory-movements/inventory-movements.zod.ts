/**
 * Generated by orval v6.31.0 üç∫
 * Do not edit manually.
 * Nory Inventory API
 * API for managing inventory, staff, locations, recipes, menu items, and related data for Nory.
 * OpenAPI spec version: 1.0.0
 */
import {
  z as zod
} from 'zod'

/**
 * Retrieve a history of inventory stock changes (movements), useful for tracking usage, waste, and restocking. Includes embedded ingredient summaries.
 * @summary List inventory movements (stock changes)
 */
export const listInventoryMovementsQueryParams = zod.object({
  "locationId": zod.string().optional(),
  "ingredientId": zod.string().optional(),
  "type": zod.enum(['waste', 'restock', 'sale', 'adjustment', 'transfer_in', 'transfer_out']).optional(),
  "startTime": zod.string().datetime().optional(),
  "endTime": zod.string().datetime().optional()
})

export const listInventoryMovementsResponseIngredientNameMax = 255;
export const listInventoryMovementsResponseIngredientUnitMax = 50;
export const listInventoryMovementsResponseUnitMax = 50;
export const listInventoryMovementsResponseCostPerUnitMin = 0;


export const listInventoryMovementsResponseItem = zod.object({
  "id": zod.string(),
  "locationId": zod.string(),
  "ingredientId": zod.string(),
  "quantity": zod.number(),
  "type": zod.enum(['waste', 'restock', 'sale', 'adjustment', 'transfer_in', 'transfer_out']),
  "notes": zod.string().nullish(),
  "createdAt": zod.string().datetime(),
  "recordedByStaffId": zod.string().nullish(),
  "ingredient": zod.object({
  "id": zod.string(),
  "name": zod.string().min(1).max(listInventoryMovementsResponseIngredientNameMax),
  "unit": zod.string().min(1).max(listInventoryMovementsResponseIngredientUnitMax)
}),
  "unit": zod.string().min(1).max(listInventoryMovementsResponseUnitMax),
  "costPerUnit": zod.number().min(listInventoryMovementsResponseCostPerUnitMin).nullable()
})
export const listInventoryMovementsResponse = zod.array(listInventoryMovementsResponseItem)

/**
 * Record a change in stock for a specific ingredient at a location. This is the preferred way to track stock changes over direct stock updates.
 * @summary Create a new inventory movement (e.g., log waste or restock)
 */
export const createInventoryMovementBody = zod.object({
  "locationId": zod.string(),
  "ingredientId": zod.string(),
  "quantity": zod.number(),
  "type": zod.enum(['waste', 'restock', 'sale', 'adjustment', 'transfer_in', 'transfer_out']),
  "notes": zod.string().nullish(),
  "recordedByStaffId": zod.string().nullish()
})

