// orval.config.js

// No import of defineConfig needed for module.exports format

module.exports = {
  // --- Main API Client Generation ---
  // This configuration generates:
  // - Tanstack Query hooks
  // - Standard TypeScript types (.ts files) in the 'schemas' directory
  // - MSW handlers
  // - Uses your custom Axios instance
  noryApiClient: {
    input: {
      target: "./salad.yml", // Path to your OpenAPI YAML
    },
    output: {
      // Use 'tags-split' mode. This splits operations by tag into the 'target'
      // directory and schemas by definition into the 'schemas' directory.
      mode: "tags-split",
      // Target directory for the generated API client files (hooks, functions split by tag)
      target: "./src/api/generated",
      // Target directory for the generated standard TypeScript schemas (types).
      // Zod schemas will also be generated here by the second config.
      schemas: "./src/api/generated/model",
      client: "axios", // Orval uses axios internally, overridden by mutator
      clean: true, // Clean the output directories (target and schemas) before generating

      // --- Tanstack Query Hooks Configuration ---
      hooks: {
        reactQuery: true, // Enable generation of useQuery, useMutation hooks
        // reactQuery: { version: 5 }, // Specify Tanstack Query V5 if needed
      },

      // --- Zod Validation (DISABLED here) ---
      // schemaValidation and validate are typically disabled in the main client config
      // when you are generating Zod schemas separately using a dedicated config block.
      // schemaValidation: true,
      // validate: "zod",

      // --- Mocking (MSW) Configuration ---
      mock: true,
      mockRoute: "msw", // Use 'msw' for MSW handler generation
      // Specify the single output path for all generated MSW handlers
      mockSpecificPath: "./src/api/generated/msw.ts",

      // --- Custom Mutator (Axios Instance) Configuration ---
      // This tells Orval to use your custom 'customInstance' function
      // from the specified path for all API calls.
      override: {
        mutator: {
          path: "./src/api/custom-instance.ts", // Path to your custom instance file
          name: "customInstance", // The name of the exported function from that file
        },
        // Optional: Add operation-specific overrides here if needed
      },
    },
  },

  // --- Zod Schema Generation Only ---
  // This separate configuration object is specifically for generating
  // ONLY the Zod schemas (.zod.ts files), following your example's convention.
  // Note: Using 'tags-split' mode here might still lead to Zod schemas
  // being placed in tag subdirectories within the target directory,
  // which is inconsistent with the flat model directory for .ts files.
  // A potentially better approach for consistent flatness is using 'split' mode,
  // but this config follows your request to match the 'petstoreZod' example's mode.
  noryApiZodSchemas: {
    input: {
      target: "./salad.yml", // Point to the same schema file
    },
    output: {
      // Keeping 'tags-split' mode as in the petstoreZod example.
      // When used with client: 'zod' and target, this mode might
      // create subdirectories based on tags *within* the target directory.
      mode: "tags-split",
      // --- Matching example: target points to the main client directory ---
      // This means Zod files will be generated into ./src/api/generated
      // and potentially into subdirectories based on tags if 'tags-split' does that here.
      // This is different from the 'schemas' dir used by the main config's model output.
      target: "./src/api/generated", // Zod schemas will go here
      // Note: The 'schemas' property is not used when client: 'zod'
      // schemas: "./src/api/generated/model", // <-- Not relevant for client: 'zod'

      // --- KEY SETTING: Use the 'zod' client mode ---
      // This tells Orval to generate Zod validators instead of a client.
      client: "zod",
      // Specify the file extension for the generated Zod files.
      fileExtension: ".zod.ts",
      // Clean should be set to false here to avoid deleting files
      // generated by the first configuration task.
      clean: false,
      // Other client-specific, hook, mock, mutator options are not needed
      // for this Zod-only generation task.
    },
  },
};
