import http from 'http';
import fs from 'fs';
import path from 'path';
import swaggerUI from 'swagger-ui-express';
import jsYaml from 'js-yaml';
import express, { Request, Response, Application } from 'express';
import cors from 'cors';
import cookieParser from 'cookie-parser';
import bodyParser from 'body-parser';
import OpenApiValidator from 'express-openapi-validator';
import logger from './logger.js';
import config from './config.js';
import controllers from './controllers/index.js';
import services from './services/index.js';
import openApiRouter from './utils/openapiRouter.js';

interface Schema {
  [key: string]: unknown;
}

class ExpressServer {
  app: Application;
  port: number;
  openApiPath: string;
  schema: Schema;
  server?: http.Server;

  constructor(port: number, openApiYaml: string) {
    this.port = port;
    this.app = express();
    this.openApiPath = openApiYaml;
    this.schema = {} as Schema;
    try {
      this.schema = jsYaml.load(fs.readFileSync(openApiYaml, 'utf8')) as Schema;
    } catch (e) {
      logger.error('failed to start Express Server', (e as Error).message);
    }
    this.setupMiddleware();
  }

  setupMiddleware(): void {
    // this.setupAllowedMedia();
    this.app.use(cors());
    this.app.use(bodyParser.json({ limit: '14MB' }));
    this.app.use(express.json());
    this.app.use(express.urlencoded({ extended: false }));
    this.app.use(cookieParser());
    // Simple test to see that the server is up and responding
    this.app.get('/hello', (req: Request, res: Response) =>
      res.send(`Hello World. path: ${this.openApiPath}`)
    );
    // Send the openapi document *AS GENERATED BY THE GENERATOR*
    this.app.get('/openapi', (req: Request, res: Response) =>
      res.sendFile(path.join(config.ROOT_DIR, '..', 'api', 'openapi.yaml'))
    );
    // View the openapi document in a visual interface. Should be able to test from this page
    this.app.use('/api-docs', swaggerUI.serve, swaggerUI.setup(this.schema));
    this.app.get('/login-redirect', (req: Request, res: Response) => {
      res.status(200);
      res.json(req.query);
    });
    this.app.get('/oauth2-redirect.html', (req: Request, res: Response) => {
      res.status(200);
      res.json(req.query);
    });
    this.app.use(
      OpenApiValidator.middleware({
        apiSpec: this.openApiPath,
        operationHandlers: path.join(config.ROOT_DIR),
        fileUploader: { dest: config.FILE_UPLOAD_PATH },
      })
    );

    // Use the OpenAPI router
    this.app.use(openApiRouter(controllers, services));
  }

  launch(): void {
    this.app.use(
      (
        err: Error & { status?: number; errors?: string },
        _req: Request,
        res: Response
      ) => {
        // format errors
        res.status(err.status || 500).json({
          message: err.message || err,
          errors: err.errors || '',
        });
      }
    );

    this.server = http.createServer(this.app).listen(this.port);
    logger.info(`Listening on port ${this.port}`);
  }

  async close(): Promise<void> {
    if (this.server !== undefined) {
      await new Promise<void>((resolve) => {
        this.server?.close(() => {
          resolve();
        });
      });
      logger.info(`Server on port ${this.port} shut down`);
    }
  }
}

export default ExpressServer;
